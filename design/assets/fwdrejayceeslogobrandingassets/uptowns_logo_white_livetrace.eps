%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: uptowns_logo_white_livetrace.eps
%%Creator: Adobe Illustrator(R) 14.0
%%For: Danielle Ameling
%%CreationDate: 1/25/11
%%BoundingBox: 0 0 796 1031
%%HiResBoundingBox: 0 0 795.7198 1030.6299
%%CropBox: 0 0 795.7198 1030.6299
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 14.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 14.0.0 x367 R agm 4.4890 ct 5.1541%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 100 128 8%%BeginData: 1914 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFF%FDFCFFFDC7FFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                                                                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq{pop/AGMCORE_currentbg load}{/Procedure get_res}ifelse setblackgeneration
	dup null eq{pop/AGMCORE_currentucr load}{/Procedure get_res}ifelse setundercolorremoval
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 4.2.2-c063 53.352624, 2008/07/30-18:05:41        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/">
         <xmp:CreatorTool>Adobe Illustrator CS4</xmp:CreatorTool>
         <xmp:CreateDate>2011-01-25T22:53:02-06:00</xmp:CreateDate>
         <xmp:MetadataDate>2011-01-25T22:53:02-06:00</xmp:MetadataDate>
         <xmp:ModifyDate>2011-01-25T22:53:02-06:00</xmp:ModifyDate>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>200</xmpGImg:width>
                  <xmpGImg:height>256</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEASABIAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAASAAAAAEA&#xA;AQBIAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAADIAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX&#xA;Yq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FX//2Q==</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/">
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>12.084540</stDim:w>
            <stDim:h>15.501553</stDim:h>
            <stDim:unit>Inches</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:HasVisibleTransparency>False</xmpTPg:HasVisibleTransparency>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Default Swatch Group</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/">
         <dc:format>application/postscript</dc:format>
      </rdf:Description>
      <rdf:Description rdf:about=""
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#">
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:048011740720681191098C86A1ED33A7</stRef:instanceID>
            <stRef:documentID>xmp.did:048011740720681191098C86A1ED33A7</stRef:documentID>
            <stRef:originalDocumentID>xmp.did:048011740720681191098C86A1ED33A7</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:DocumentID>xmp.did:058011740720681191098C86A1ED33A7</xmpMM:DocumentID>
         <xmpMM:InstanceID>xmp.iid:058011740720681191098C86A1ED33A7</xmpMM:InstanceID>
         <xmpMM:OriginalDocumentID>xmp.did:048011740720681191098C86A1ED33A7</xmpMM:OriginalDocumentID>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:048011740720681191098C86A1ED33A7</stEvt:instanceID>
                  <stEvt:when>2011-01-25T22:52:33-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:058011740720681191098C86A1ED33A7</stEvt:instanceID>
                  <stEvt:when>2011-01-25T22:53:02-06:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CS4</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -1030.63 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 1030.63 li
795.72 1030.63 li
795.72 0 li
cp
clp
[1 0 0 1 0 0 ]ct
641.344 0 mo
641.824 0 642.305 0 642.785 0 cv
644.851 2.00195 644.874 5.04932 644.945 7.68213 cv
645.208 17.3994 643.038 25.9683 642.305 34.8096 cv
641.291 47.0381 640.225 59.6724 639.664 72.02 cv
638.48 98.0454 641.078 123.378 646.386 144.76 cv
656.347 184.885 677.04 213.786 707.128 233.105 cv
708.825 234.195 711.688 235.655 711.449 238.387 cv
707.813 240.021 703.879 238.654 700.646 237.667 cv
690.929 234.699 682.655 229.012 675.917 223.502 cv
666.256 215.603 658.137 206.369 651.188 196.375 cv
644.111 186.197 637.824 174.552 633.901 161.805 cv
630.31 150.132 628.343 136.782 624.778 125.555 cv
624.306 124.066 624.083 122.182 622.617 121.234 cv
621.114 127.359 621.177 133.837 621.177 139.959 cv
621.177 146.8 620.584 153.374 621.417 159.645 cv
622.982 171.421 626.407 182.256 630.3 191.333 cv
638.302 209.989 649.945 226.399 665.833 237.187 cv
673.505 242.395 683.11 246.879 694.163 249.43 cv
705.125 251.959 719.339 252.198 731.617 250.39 cv
742.898 248.729 753.503 245.78 763.788 241.988 cv
768.302 240.323 772.999 237.767 777.954 235.746 cv
780.688 234.63 785.907 232.407 789.958 232.625 cv
798.064 233.062 791.16 242.592 788.518 246.069 cv
785.703 249.772 782.92 252.521 779.874 254.951 cv
772.132 261.129 764.407 264.557 757.307 267.435 cv
741.404 273.88 718.915 278.055 696.805 275.117 cv
656.342 269.74 631.038 246.175 615.895 216.061 cv
608.397 201.151 602.769 182.45 599.329 162.766 cv
597.495 152.268 595.917 141.755 596.448 130.597 cv
598.522 86.9839 611.602 52.2549 627.179 21.3662 cv
630.756 14.2739 635.515 4.2793 641.344 0 cv
cp
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
716.251 78.9819 mo
716.251 80.7427 716.251 82.5029 716.251 84.2637 cv
711.529 84.2637 706.808 84.2637 702.086 84.2637 cv
701.526 96.7471 702.006 110.271 701.846 123.154 cv
699.846 123.154 697.845 123.154 695.844 123.154 cv
695.844 110.271 695.844 97.3872 695.844 84.5034 cv
691.521 83.9438 686.161 84.4233 681.438 84.2637 cv
681.597 82.5811 681.122 80.2656 681.679 78.9819 cv
693.203 78.9819 704.728 78.9819 716.251 78.9819 cv
cp
f
730.896 78.9819 mo
735.023 91.4199 739.053 103.956 743.381 116.192 cv
747.692 103.859 752.047 91.5684 756.105 78.9819 cv
758.747 78.9819 761.388 78.9819 764.028 78.9819 cv
764.028 93.7061 764.028 108.43 764.028 123.154 cv
762.188 123.154 760.348 123.154 758.507 123.154 cv
758.507 110.991 758.507 98.8276 758.507 86.6641 cv
754.004 98.5669 749.951 110.919 745.782 123.154 cv
744.021 123.154 742.261 123.154 740.5 123.154 cv
736.262 110.908 731.971 98.7139 728.016 86.1841 cv
727.455 98.0273 727.936 110.911 727.775 123.154 cv
725.854 123.154 723.935 123.154 722.014 123.154 cv
722.174 108.51 721.693 93.2261 722.254 78.9819 cv
725.135 78.9819 728.016 78.9819 730.896 78.9819 cv
cp
f
34.6445 106.83 mo
34.4424 104.711 33.9258 102.907 33.6841 100.828 cv
38.1738 99.9399 41.8584 99.6221 43.0479 96.2671 cv
45.0718 90.5571 39.0674 86.3164 33.6841 88.585 cv
29.9824 90.1445 29.3965 97.2734 26.4814 100.828 cv
21.354 107.081 7.36426 107.375 2.23291 101.308 cv
-1.45898 96.9434 -.15332 89.3389 3.67334 86.1841 cv
6.83545 83.5771 10.0454 83.2988 15.4375 82.8232 cv
15.5571 85.1895 15.8096 86.9819 15.918 88.8247 cv
13.5132 89.4263 11.2427 89.0537 9.67578 90.9854 cv
6.70068 94.6528 9.73438 100.919 14.9575 99.3877 cv
19.353 98.0991 19.9438 90.4087 22.8804 86.9043 cv
28.5898 80.0903 44.3652 81.0596 49.29 86.4243 cv
52.6528 90.0874 52.7578 97.8784 49.5298 101.548 cv
46.3179 105.201 41.4746 105.952 34.6445 106.83 cv
cp
f
51.2104 128.196 mo
51.2104 135.878 51.2104 143.56 51.2104 151.242 cv
34.4043 151.242 17.5986 151.242 .79248 151.242 cv
.79248 143.72 .79248 136.198 .79248 128.676 cv
3.67334 128.676 6.55469 128.676 9.43555 128.676 cv
9.43555 134.197 9.43555 139.719 9.43555 145.241 cv
13.0366 145.241 16.6382 145.241 20.2393 145.241 cv
20.7993 140.519 20.3198 134.758 20.4795 129.636 cv
23.2803 129.636 26.0815 129.636 28.8823 129.636 cv
28.8823 134.838 28.8823 140.039 28.8823 145.241 cv
33.3643 145.241 37.8457 145.241 42.3276 145.241 cv
43.0474 140.119 42.0879 133.318 42.8076 128.196 cv
45.6084 128.196 48.4097 128.196 51.2104 128.196 cv
cp
f
51.2104 173.809 mo
51.2104 181.491 51.2104 189.173 51.2104 196.855 cv
34.4043 196.855 17.5986 196.855 .79248 196.855 cv
.79248 189.333 .79248 181.811 .79248 174.289 cv
3.67334 174.289 6.55469 174.289 9.43555 174.289 cv
9.43555 179.81 9.43555 185.332 9.43555 190.854 cv
13.0366 190.854 16.6382 190.854 20.2393 190.854 cv
20.7993 186.132 20.3198 180.371 20.4795 175.249 cv
23.2803 175.249 26.0815 175.249 28.8823 175.249 cv
28.8823 180.45 28.8823 185.652 28.8823 190.854 cv
33.3643 190.854 37.8457 190.854 42.3276 190.854 cv
43.0474 185.731 42.0879 178.931 42.8076 173.809 cv
45.6084 173.809 48.4097 173.809 51.2104 173.809 cv
cp
f
346.998 437.642 mo
332.278 440.65 333.043 428.762 329.231 419.157 cv
327.19 414.013 324.917 409.181 323.229 405.473 cv
313.105 383.237 301.946 362.186 290.577 340.175 cv
288.155 335.485 283.287 331.82 283.135 326.491 cv
282.962 320.454 288.434 314.95 291.538 311.847 cv
297.742 305.644 305.55 299.608 311.945 294.082 cv
323.032 284.501 333.777 274.626 343.156 264.314 cv
358.257 247.71 370.908 232.382 382.531 212.219 cv
384.365 209.037 386.056 205.533 388.053 202.376 cv
389.943 199.387 392.102 195.986 395.015 194.214 cv
400.369 190.957 404.231 196.784 406.539 202.376 cv
411.509 214.418 412.977 228.757 415.183 243.428 cv
423.928 301.606 431.388 358.657 438.471 418.437 cv
443.226 458.566 447.114 497.002 450.955 538.23 cv
453.67 567.371 456.505 599.555 457.678 630.896 cv
457.884 636.409 458.157 641.744 458.158 646.98 cv
458.158 652.386 458.741 657.627 458.158 662.825 cv
457.814 665.885 457.067 668.663 455.757 671.708 cv
454.999 673.471 453.23 677.863 450.476 677.709 cv
447.719 677.556 446.553 671.515 445.913 667.146 cv
443.983 653.955 444.801 637.173 444.232 623.694 cv
441.787 565.699 435.725 512.973 429.828 458.048 cv
425.845 420.954 421.539 388.113 416.143 351.458 cv
413.703 334.888 410.743 317.318 407.26 300.324 cv
405.662 292.533 403.273 284.37 401.258 276.317 cv
399.105 267.722 394.533 254.926 384.451 259.032 cv
381.302 260.315 377.972 263.452 375.328 266.714 cv
373.994 268.362 373.027 270.162 371.727 271.516 cv
370.254 273.048 368.682 274.435 367.405 275.597 cv
356.157 285.839 341.86 295.824 328.991 304.405 cv
323.902 307.798 318.935 311.003 313.386 314.008 cv
308.053 316.895 301.672 320.087 302.341 328.892 cv
302.692 333.503 305.825 337.841 308.104 342.576 cv
314.318 355.489 320.273 369.77 325.63 382.667 cv
331.136 395.923 336.545 410.029 341.956 423.958 cv
343.705 428.462 345.787 432.937 346.998 437.642 cv
cp
f
146.285 287.601 mo
146.012 282.786 148.997 279.941 151.327 277.277 cv
156.134 271.782 160.53 266.959 166.692 261.913 cv
168.747 260.231 173.682 256.283 177.016 257.112 cv
179.792 257.802 181.978 265.476 182.778 267.915 cv
186.409 278.981 189.246 288.68 193.342 298.884 cv
194.104 300.78 194.285 303.111 196.223 304.165 cv
198.938 298.613 199 290.167 201.505 283.519 cv
202.184 281.719 203.667 278.854 205.346 278.718 cv
206.79 278.601 209.449 280.873 210.868 281.839 cv
212.855 283.191 214.434 284.315 215.91 285.2 cv
219.766 287.51 222.972 289.834 227.674 289.761 cv
227.776 286.862 225.452 284.724 224.073 282.319 cv
220.989 276.938 218.476 267.998 222.393 261.193 cv
223.804 258.741 225.92 257.467 227.435 254.711 cv
222.345 254.724 218.195 255.673 213.509 256.392 cv
211.956 256.63 210.203 257.113 208.948 256.872 cv
205.305 256.172 203.73 250.842 202.945 247.269 cv
201.95 242.74 202.098 237.738 200.305 234.306 cv
198.576 234.552 197.602 236.374 196.703 237.667 cv
195.795 238.972 194.926 240.449 194.063 241.748 cv
192.293 244.408 190.926 247.694 187.58 248.709 cv
185.414 244.556 185.993 239.348 186.379 234.545 cv
187.137 225.146 188.747 216.184 190.941 207.418 cv
192.093 202.817 193.435 198.505 195.263 195.175 cv
195.65 195.107 195.676 195.401 195.983 195.415 cv
201.496 206.039 206.473 218.198 210.388 231.185 cv
211.361 234.413 212.252 242.547 214.95 243.188 cv
216.996 243.674 218.375 242.04 220.232 241.507 cv
222.184 240.948 224.459 240.728 226.714 240.307 cv
231.032 239.502 243.736 237.178 245.441 241.748 cv
246.209 243.808 244.915 246.657 244 248.229 cv
241.65 252.271 239.665 253.748 236.798 257.592 cv
235.623 259.168 233.927 261.187 233.677 262.633 cv
233.207 265.344 234.715 269.625 235.597 272.716 cv
239.927 287.893 245.874 301.142 251.683 315.448 cv
252.748 318.071 253.562 320.844 254.084 324.811 cv
254.616 328.85 254.331 333.474 251.923 333.933 cv
249.889 334.321 247.973 332.229 246.642 331.053 cv
242.788 327.65 238.126 322.008 234.637 318.809 cv
230.767 315.262 225.985 311.248 221.192 307.766 cv
219.684 306.67 217.448 304.912 216.15 304.885 cv
214.148 304.844 211.788 307.061 210.628 308.486 cv
206.243 313.878 202.157 324.97 198.864 332.733 cv
197.251 336.535 195.498 340.438 193.822 345.697 cv
193.02 348.215 191.573 358.063 188.541 358.18 cv
185.116 358.313 184.604 349.851 184.459 345.216 cv
184.081 333.179 183.634 324.306 183.258 312.327 cv
183.079 306.603 183.512 298.665 181.818 295.522 cv
178.012 288.463 164.148 289.006 153.248 289.521 cv
150.706 289.641 147.648 290.367 146.285 287.601 cv
cp
f
608.452 670.508 mo
604.676 671.826 599.787 674.139 595.248 673.148 cv
594.694 671.562 596.088 670.285 596.688 669.067 cv
601.157 659.989 603.112 647.501 604.851 635.697 cv
608.941 607.922 609.864 577.653 610.613 546.393 cv
612.097 484.482 610.381 420.885 605.331 362.981 cv
604.693 355.667 604.085 348.349 603.17 341.375 cv
602.297 334.718 601.445 328.071 598.849 322.17 cv
588.249 322.313 579.057 318.35 570.278 314.728 cv
544.776 304.205 519.34 294.035 493.69 283.279 cv
477.09 276.318 459.62 269.483 445.434 259.513 cv
441.9 257.029 438.283 254.355 435.83 251.11 cv
433.31 247.776 431.739 243.731 429.828 239.107 cv
428.164 235.083 426.438 230.684 424.786 226.143 cv
423.236 221.883 421.003 216.82 420.704 212.459 cv
420.632 211.399 420.534 209.726 421.185 209.338 cv
421.57 208.799 421.479 208.614 422.145 208.618 cv
425.373 208.641 429.456 211.706 432.229 213.66 cv
435.398 215.894 438.03 218.296 440.632 220.142 cv
446.923 224.606 453.095 228.186 458.878 231.905 cv
471.24 239.854 484.703 247.6 497.292 253.511 cv
510.769 259.838 524.78 265.634 540.988 269.835 cv
552.377 272.788 565.679 275.571 580.603 274.877 cv
585.133 274.666 589.805 274.614 594.047 273.437 cv
598.015 272.335 600.508 269.525 606.052 269.595 cv
608.143 269.622 610.324 270.399 611.813 271.276 cv
622.345 277.478 622.912 296.967 622.138 314.008 cv
621.372 330.844 620.373 349.334 621.177 366.342 cv
622.016 384.074 621.095 401.937 621.897 418.917 cv
622.712 436.156 622.617 454.003 622.617 471.492 cv
622.618 543.178 620.815 611.523 608.452 670.508 cv
cp
f
14.2373 219.901 mo
15.895 221.125 15.9146 223.986 17.1182 225.663 cv
13.2334 226.973 9.27441 227.703 8.71533 231.425 cv
8.26465 234.423 10.5181 237 12.7969 238.146 cv
17.917 240.725 31.5952 241.006 38.0059 238.627 cv
40.6221 237.656 43.2422 235.508 43.2876 232.865 cv
43.3799 227.508 37.3159 226.921 32.4839 225.903 cv
33.4844 223.862 34.6514 221.989 35.605 219.901 cv
41.4404 221.074 47.3521 222.5 50.2505 226.624 cv
51.9771 229.08 52.6548 234.488 50.4902 237.906 cv
43.5117 248.927 11.7603 248.927 2.95313 239.587 cv
-.779297 235.628 -.433594 228.973 2.23291 225.663 cv
4.76758 222.518 9.53613 220.975 14.2373 219.901 cv
cp
f
.79248 265.994 mo
.996582 265.95 1.01904 266.088 1.03223 266.234 cv
9.4043 269.032 17.918 272.61 26.2417 275.837 cv
32.3643 278.211 42.062 276.539 51.2104 277.038 cv
51.2104 279.038 51.2104 281.039 51.2104 283.039 cv
43.4536 283.789 36.6274 282.022 29.8428 283.039 cv
28.709 283.209 27.5347 283.983 26.2417 284.479 cv
18.0049 287.641 9.08643 290.7 1.03223 294.082 cv
.474121 292.24 .951172 289.362 .79248 287.12 cv
7.08154 284.606 13.7891 282.511 19.9995 279.918 cv
13.8594 277.335 7.05176 275.419 .79248 272.956 cv
.79248 270.636 .79248 268.315 .79248 265.994 cv
cp
f
31.0435 322.65 mo
25.0903 324.22 18.582 325.234 12.7969 326.971 cv
19.0576 328.233 25.0967 329.717 31.2832 331.053 cv
31.1245 328.331 31.6025 324.972 31.0435 322.65 cv
cp
50.9707 311.607 mo
51.5288 313.29 51.0522 316.007 51.2104 318.089 cv
47.6025 318.962 44.0806 319.922 40.1665 320.49 cv
39.6138 324.098 40.0811 328.727 39.9268 332.733 cv
43.2192 334.162 47.6514 334.452 51.2104 335.614 cv
51.2104 337.774 51.2104 339.935 51.2104 342.096 cv
34.3975 338.102 17.6997 333.992 .79248 330.092 cv
.79248 327.852 .79248 325.611 .79248 323.37 cv
17.5942 319.525 34.3306 315.614 50.9707 311.607 cv
cp
f
484.087 331.292 mo
489.891 354.523 491.767 380.977 493.931 408.114 cv
496.041 434.571 497.703 462.454 498.252 490.217 cv
499.282 542.304 499.139 598.142 494.411 646.98 cv
494.084 650.365 494.143 653.852 493.451 656.823 cv
492.787 659.675 490.968 662.634 489.609 665.226 cv
488.23 667.856 486.862 670.851 484.087 671.948 cv
482.026 669.176 482.672 665.492 482.887 662.345 cv
483.113 659.025 483.741 655.762 484.087 652.502 cv
486.236 632.258 486.921 610.748 487.929 589.604 cv
489.273 561.41 489.37 531.596 489.369 501.98 cv
489.368 473.056 488.505 444.146 486.008 416.276 cv
484.266 396.823 481.771 376.104 476.404 359.141 cv
474.454 352.975 471.845 346.983 468.481 343.056 cv
466.648 340.915 464.079 339.329 461.759 337.534 cv
457.176 333.99 452.657 330.707 448.314 326.731 cv
446.347 324.93 443.938 322.613 443.513 319.529 cv
447.188 318.462 452.047 320.243 456.237 321.45 cv
465.324 324.066 475.996 328.041 484.087 331.292 cv
cp
f
795.72 406.674 mo
795.72 407.474 795.72 408.274 795.72 409.074 cv
793.568 413.991 789.7 416.862 785.637 420.117 cv
781.986 423.042 775.346 426.468 773.872 431.161 cv
772.808 434.549 773.036 438.755 773.152 442.924 cv
773.26 446.803 773.544 450.61 773.872 454.687 cv
775.121 470.196 776.852 484.871 778.914 499.58 cv
779.917 506.732 780.781 515.809 778.434 522.386 cv
777.755 524.288 776.273 526.538 774.593 526.707 cv
771.736 526.995 770.239 524.615 769.07 523.106 cv
766.417 519.682 764.35 514.895 762.107 510.863 cv
756.107 500.07 749.97 491.593 742.421 482.535 cv
739.831 479.428 738.31 477.064 733.777 478.694 cv
728.089 480.739 723.319 487.179 719.853 491.417 cv
715.982 496.15 711.238 501.925 707.849 506.302 cv
704.729 510.328 700.584 515.494 696.564 521.666 cv
694.971 524.112 693.468 527.567 692.003 530.548 cv
690.723 533.151 687.517 538.022 684.8 537.03 cv
680.352 535.405 684.185 519.801 684.8 516.864 cv
688.346 499.931 691.769 484.029 695.604 467.411 cv
696.373 464.076 697.685 460.178 697.524 457.088 cv
697.032 447.601 684.877 443.871 678.317 441.963 cv
675.01 441.001 670.088 439.974 665.833 439.083 cv
661.205 438.114 655.841 437.192 654.789 434.762 cv
652.791 430.144 659.702 425.064 662.712 422.758 cv
666.971 419.495 671.134 417.101 674.477 415.076 cv
678.231 412.801 683.496 409.716 686.961 408.114 cv
691.182 406.163 699.592 402.61 704.247 404.993 cv
705.078 406.29 705.605 407.825 705.928 409.314 cv
707.947 418.652 707.545 429.959 708.328 440.763 cv
709.115 451.624 709.699 462.248 712.17 471.012 cv
713.615 470.7 714.368 469.086 715.051 467.891 cv
718.957 461.055 721.283 453.851 725.615 447.245 cv
726.889 445.302 729.414 441.329 732.337 441.483 cv
733.575 441.549 734.622 442.585 735.698 443.884 cv
738.418 447.165 741.355 450.741 743.861 453.247 cv
746.865 456.25 749.815 459.226 753.225 461.409 cv
754.358 462.135 756.041 463.231 757.546 462.609 cv
758.224 458.009 755.61 454.018 754.665 449.886 cv
753.618 445.31 753.246 440.537 754.425 435.482 cv
756.326 427.335 761.179 423.645 766.67 419.637 cv
767.239 419.221 768.904 419.025 768.351 417.717 cv
764.967 416.949 760.938 416.682 756.826 416.276 cv
752.681 415.867 748.078 415.875 745.062 414.836 cv
743.007 414.127 741.479 412.304 740.74 410.274 cv
737.842 402.308 742.033 392.771 740.74 383.147 cv
738.466 382.684 736.68 384.765 735.218 386.028 cv
731.762 389.015 729.396 391.611 725.615 394.67 cv
724.215 395.803 721.319 398.303 719.853 397.071 cv
718.206 395.688 719.701 389.827 720.333 387.228 cv
724.235 371.175 731.156 358.165 737.859 345.697 cv
739.93 341.845 741.936 337.636 744.342 334.414 cv
745.078 333.427 746.188 331.938 747.463 332.013 cv
750.548 341.28 751.756 352.653 752.984 364.422 cv
753.549 369.821 754.17 375.91 754.425 381.947 cv
754.644 387.117 753.367 396.896 756.105 398.992 cv
757.895 400.36 761.433 398.92 765.229 398.992 cv
768.584 399.054 771.753 399.519 774.353 399.712 cv
783.838 400.417 792.039 400.92 795.72 406.674 cv
cp
f
535.226 351.458 mo
538.091 362.502 539.357 374.589 540.508 386.988 cv
543.875 423.266 546.27 463.139 546.27 503.181 cv
546.271 543.714 545.371 583.696 541.468 620.333 cv
540.16 632.612 538.846 644.785 536.426 655.863 cv
536.438 655.813 536.214 656.028 536.187 656.104 cv
535.481 657.976 533.814 660.228 532.345 661.865 cv
530.97 663.397 529.098 665.708 526.822 665.466 cv
524.34 663.245 524.967 659.407 525.143 656.584 cv
525.329 653.583 525.922 650.339 526.343 647.461 cv
532.538 605.136 534.296 559.114 536.187 511.823 cv
537.229 485.754 537.317 456.829 535.466 430.44 cv
534.192 412.286 532.396 391.708 527.303 376.185 cv
525.587 370.954 523.687 365.667 520.82 362.021 cv
519.369 360.175 517.109 358.519 515.059 356.74 cv
511.12 353.323 507.672 350.434 503.774 346.177 cv
502.233 344.494 499.53 341.023 499.933 339.455 cv
500.289 338.926 500.25 338.76 500.894 338.735 cv
503.779 338.622 507.099 340.022 510.257 341.135 cv
518.275 343.962 528.422 348.102 535.226 351.458 cv
cp
f
548.911 357.7 mo
554.965 357.961 561.154 360.867 566.197 362.981 cv
568.677 364.021 571.165 364.969 573.88 366.342 cv
576.191 367.511 579.81 369.058 580.843 370.423 cv
582.85 373.078 583.562 380.934 584.203 386.508 cv
587.593 415.936 586.604 448.272 586.604 480.134 cv
586.604 517.803 583.626 554.78 580.603 590.085 cv
578.793 611.21 575.859 633.883 572.199 654.183 cv
571.37 658.78 570.59 660.06 567.397 663.065 cv
566.139 664.25 563.67 666.596 561.875 665.946 cv
558.238 664.629 561.393 651.884 561.875 649.382 cv
565.194 632.189 566.773 614.756 568.598 596.807 cv
571.071 572.477 572.794 548.328 574.36 523.586 cv
575.107 511.781 575.827 499.619 576.041 485.656 cv
576.437 459.768 577.271 433.785 574.36 409.314 cv
572.981 397.724 570.696 384.532 565.717 377.625 cv
563.516 374.573 559.952 372.136 556.354 368.743 cv
554.031 366.554 548.801 362.453 548.19 358.42 cv
548.325 358.074 548.565 357.834 548.911 357.7 cv
cp
f
1.03223 362.741 mo
13.9097 364.404 40.3242 359.248 48.8096 366.103 cv
51.0786 367.935 53.2529 372.201 51.2104 376.425 cv
48.9336 381.136 42.1816 381.988 35.605 382.187 cv
35.1934 380.198 34.8701 378.121 34.4043 376.185 cv
38.3359 375.926 43.0908 376.029 43.2876 372.584 cv
43.6006 367.111 29.3398 368.743 23.8408 368.743 cv
15.0322 368.743 7.39746 368.743 .79248 368.743 cv
.950684 366.821 .474609 364.264 1.03223 362.741 cv
cp
f
395.976 670.987 mo
392.988 670.205 391.517 667.182 390.213 664.506 cv
388.934 661.879 387.578 658.451 387.092 655.383 cv
386.578 652.136 386.832 648.351 386.612 644.82 cv
383.746 598.718 379.518 553.008 375.568 507.502 cv
375.267 504.03 375.168 500.219 374.848 496.699 cv
374.513 493.026 374.694 489.329 373.887 486.376 cv
372.534 481.423 368.749 477.532 364.284 475.093 cv
360.311 472.922 355.387 472.148 350.359 470.771 cv
331.787 465.688 313.013 459.988 293.938 454.207 cv
289.477 452.854 284.552 451.623 280.494 449.406 cv
277.021 447.509 273.361 444.816 268.969 442.684 cv
265.119 440.814 258.389 437.587 254.564 440.043 cv
251.18 442.216 252.303 449.73 253.604 454.687 cv
254.938 459.769 256.704 464.193 257.925 468.611 cv
260.633 478.405 262.818 488.782 264.648 498.379 cv
268.693 519.598 271.644 540.549 274.731 561.517 cv
277.827 582.538 280.567 604.359 283.135 626.335 cv
284.329 636.553 285.803 648.214 286.736 659.464 cv
287.411 667.613 288.097 677.324 286.736 685.392 cv
286.35 687.681 285.741 690.329 283.855 691.633 cv
281.35 690.367 280.667 687.326 280.014 684.911 cv
277.808 676.76 276.926 667.076 275.692 658.023 cv
267.469 597.719 258.725 536.341 241.84 483.255 cv
238.688 473.346 234.626 462.531 229.835 453.487 cv
227.599 449.265 224.931 444.704 222.633 439.803 cv
219.732 433.617 216.331 425.221 219.271 417.957 cv
221.783 411.752 228.409 409.158 236.078 408.594 cv
251.557 407.456 263.409 414.772 273.531 420.117 cv
295.604 431.773 316.441 441.065 343.156 448.205 cv
352.194 450.621 362.972 452.974 373.167 454.927 cv
380.561 456.343 385.245 457.402 388.533 463.089 cv
391.705 468.577 392.037 478.341 391.414 487.576 cv
390.822 496.357 390.829 505.902 391.414 513.983 cv
394.588 557.833 398.614 599.558 398.616 646.021 cv
398.616 650.563 398.586 655.294 398.376 659.704 cv
398.19 663.616 398.977 668.126 395.976 670.987 cv
cp
f
217.591 811.907 mo
214.922 811.755 214.082 809.823 213.029 808.306 cv
210.771 805.049 208.691 801.263 206.787 797.263 cv
205.867 795.331 204.247 792.935 203.906 791.021 cv
203.289 787.563 203.144 783.988 202.706 780.698 cv
199.553 757.059 194.102 736.831 186.62 717.08 cv
178.779 696.384 167.822 675.223 156.609 656.104 cv
139.807 627.455 121.433 600.124 102.589 573.28 cv
99.7397 569.221 96.312 564.55 92.9858 560.076 cv
89.7661 555.747 85.7876 551.057 84.1025 546.393 cv
80.0454 535.162 90.7554 528.964 98.0273 525.026 cv
101.251 523.281 104.574 521.765 107.871 520.226 cv
123.763 512.809 138.494 501.911 151.327 491.417 cv
162.353 482.401 172.203 472.944 181.578 463.569 cv
186.138 459.01 191.089 453.553 195.503 448.445 cv
197.511 446.122 200.069 443.364 201.985 440.523 cv
203.609 438.116 204.982 433.325 207.267 431.4 cv
207.259 431.408 208.096 430.862 208.468 430.92 cv
212.237 431.517 212.404 439.643 211.829 444.604 cv
210.344 457.4 204.028 462.9 196.943 470.051 cv
177.82 489.354 158.347 506.926 138.362 526.227 cv
136.494 528.031 134.838 530.23 132.84 532.229 cv
128.932 536.137 125.549 539.348 121.796 544.232 cv
120.385 546.068 117.699 549.576 117.715 551.435 cv
117.727 552.812 120.463 557.185 121.556 559.116 cv
142.047 595.337 162.969 631.003 180.377 670.268 cv
189.657 691.197 197.519 713.616 204.386 737.006 cv
209.491 754.393 213.829 772.829 217.111 792.222 cv
217.645 795.375 218.203 798.778 218.551 802.064 cv
218.888 805.237 219.408 808.983 217.591 811.907 cv
cp
f
34.6445 456.848 mo
34.356 454.816 33.9731 452.878 33.6841 450.846 cv
38.2197 449.978 41.8501 449.664 43.0479 446.285 cv
45.0708 440.578 39.0439 436.319 33.6841 438.603 cv
30.0117 440.167 29.71 446.63 26.9619 450.366 cv
20.4341 459.241 -1.4126 457.396 .0722656 442.924 cv
.784668 435.98 7.17578 433.142 15.4375 432.841 cv
15.5659 434.873 15.7246 436.875 15.918 438.843 cv
13.5195 439.456 11.2593 439.09 9.67578 441.003 cv
6.65625 444.65 9.76074 450.929 14.9575 449.406 cv
19.3809 448.109 19.4448 441.022 22.8804 436.922 cv
28.3213 430.428 44.0742 430.76 49.29 436.442 cv
52.6587 440.112 52.5259 448.16 49.5298 451.566 cv
46.3179 455.219 41.4746 455.969 34.6445 456.848 cv
cp
f
41.8472 488.296 mo
39.5083 484.009 28.5723 483.759 21.4399 484.215 cv
12.603 484.78 7.92041 487.693 9.43555 497.419 cv
20.4795 497.419 31.5234 497.419 42.5674 497.419 cv
42.2363 493.914 43.2646 490.895 41.8472 488.296 cv
cp
51.2104 503.421 mo
34.4043 503.421 17.5986 503.421 .79248 503.421 cv
1.48145 497.441 -.481934 490.703 1.75293 486.136 cv
4.42334 480.679 13.9629 478.735 21.6797 478.214 cv
32.0522 477.513 45.0601 478.638 49.5298 485.176 cv
52.6841 489.789 50.5552 496.234 51.2104 503.421 cv
cp
f
297.78 480.614 mo
298.432 486.126 299.123 493.144 298.74 500.06 cv
298.538 503.716 297.719 509.521 294.659 509.902 cv
290.279 510.448 285.824 501.571 284.335 498.619 cv
283.095 496.16 282.009 494.043 280.974 491.177 cv
280.122 488.819 278.808 484.735 279.533 482.295 cv
281.241 476.549 292.477 478.035 297.78 480.614 cv
cp
f
327.551 485.176 mo
327.465 490.903 327.763 496.141 327.07 501.98 cv
326.596 505.982 325.471 513.717 321.789 513.983 cv
319.457 514.153 317.359 511.023 316.026 508.942 cv
313.048 504.292 311.278 499.776 309.784 493.578 cv
309.107 490.768 308.362 486.462 309.544 484.456 cv
312.522 479.399 323.21 482.347 327.551 485.176 cv
cp
f
358.762 491.417 mo
357.563 499.324 356.809 507.365 353.72 514.224 cv
352.8 516.267 351.255 518.928 349.398 519.025 cv
345.338 519.239 343.342 511.608 342.196 507.502 cv
341.425 504.739 340.878 502.297 340.515 499.82 cv
340.014 496.396 338.889 490.118 340.996 487.816 cv
345.219 483.202 355.496 488.303 358.762 491.417 cv
cp
f
197.664 516.624 mo
199.268 512.924 202.067 508.461 205.346 506.302 cv
206.589 505.483 209.431 504.157 211.589 504.861 cv
213.784 505.577 215.135 509.082 216.15 511.343 cv
217.388 514.1 218.508 516.756 219.271 519.266 cv
220.405 522.991 223.883 535.18 218.792 536.31 cv
216.214 536.882 213.297 534.412 211.829 533.189 cv
206.279 528.564 202.314 521.857 197.664 516.624 cv
cp
f
305.703 525.507 mo
306.196 529.634 306.811 534.113 306.663 539.431 cv
306.549 543.515 306.274 549.995 303.062 550.474 cv
300.99 550.783 298.442 547.955 297.3 546.393 cv
295.737 544.256 294.275 541.071 292.738 537.51 cv
291.388 534.383 289.328 530.188 290.337 526.947 cv
291.822 522.178 300.957 523.533 305.703 525.507 cv
cp
f
1.03223 526.707 mo
17.7588 526.707 34.4844 526.707 51.2104 526.707 cv
51.2104 528.708 51.2104 530.708 51.2104 532.709 cv
34.4043 532.709 17.5986 532.709 .79248 532.709 cv
.950684 530.786 .474609 528.23 1.03223 526.707 cv
cp
f
331.152 529.348 mo
331.087 534.235 331.272 538.445 330.672 543.512 cv
330.266 546.938 329.309 553.408 326.35 553.835 cv
322.682 554.363 319.814 547.705 318.427 544.232 cv
317.589 542.133 316.874 539.935 316.267 537.75 cv
314.957 533.042 313.96 528.081 318.908 526.947 cv
322.827 526.049 327.927 527.656 331.152 529.348 cv
cp
f
170.774 539.911 mo
172.849 536.376 176.352 531.732 179.657 530.068 cv
180.993 529.396 183.239 528.622 185.179 529.348 cv
188.246 530.495 190.161 537.088 191.181 540.391 cv
192.668 545.206 193.887 549.792 193.822 554.555 cv
193.78 557.641 192.804 560.634 190.941 561.037 cv
188.22 561.626 185.869 559.025 184.219 557.436 cv
178.656 552.077 174.712 546.352 170.774 539.911 cv
cp
f
357.562 534.869 mo
357.212 539.498 356.3 543.614 355.161 548.073 cv
354.301 551.436 353.016 557.929 349.639 558.156 cv
345.788 558.415 343.949 550.586 343.156 547.353 cv
342.601 545.086 341.995 542.52 341.716 540.151 cv
341.164 535.463 341.217 531.004 345.317 530.309 cv
349.857 529.538 354.906 532.467 357.562 534.869 cv
cp
f
237.038 578.802 mo
234.582 579.066 232.769 577.9 231.276 576.642 cv
228.701 574.47 226.438 571.488 224.313 568.719 cv
222.153 565.903 220.14 562.805 218.311 559.837 cv
220.627 556.487 223.698 550.979 228.395 550.233 cv
233.47 549.429 234.937 555.004 236.317 559.116 cv
237.532 562.733 238.719 567.104 238.958 570.399 cv
239.22 573.988 239.04 577.449 237.038 578.802 cv
cp
f
22.6401 563.438 mo
20.6382 560.663 12.4214 560.013 10.1558 563.678 cv
8.52393 566.316 9.93018 568.739 9.43555 572.56 cv
14.1572 572.56 18.8789 572.56 23.6006 572.56 cv
23.2808 568.743 24.2964 565.732 22.6401 563.438 cv
cp
32.2437 572.32 mo
38.0859 572.88 44.9683 572.4 51.2104 572.56 cv
51.2104 574.561 51.2104 576.562 51.2104 578.562 cv
34.4043 578.562 17.5986 578.562 .79248 578.562 cv
.79248 575.37 .79248 572.24 .79248 569.439 cv
.79248 566.507 .527344 563.375 1.5127 561.037 cv
4.76563 553.317 26.7036 552.556 31.0435 560.797 cv
32.8408 564.211 31.9365 567.486 32.2437 572.32 cv
cp
f
154.208 555.755 mo
157.713 555.107 160.084 558.141 162.131 560.797 cv
165.481 565.146 168.193 569.513 170.294 575.201 cv
171.261 577.818 172.361 582.693 170.294 584.083 cv
168.322 585.408 164.508 583.729 162.371 582.643 cv
157.352 580.093 154.351 577.779 150.126 574.48 cv
148.374 573.111 145.137 570.954 144.845 569.68 cv
144.518 568.252 145.869 565.086 146.525 563.678 cv
147.391 561.819 148.524 559.929 149.406 558.876 cv
150.3 557.809 152.298 556.108 154.208 555.755 cv
cp
f
195.263 578.562 mo
196.945 575.748 199.511 572.132 202.465 570.399 cv
204.111 569.435 207.274 568.293 209.428 569.68 cv
211.8 571.207 212.935 576.595 213.75 579.762 cv
214.85 584.042 215.673 588.171 215.43 592.485 cv
215.276 595.206 214.263 597.961 212.549 598.247 cv
210.412 598.604 208.258 596.169 206.787 594.646 cv
201.943 589.631 198.928 584.183 195.263 578.562 cv
cp
f
315.066 571.6 mo
315.411 575.68 316.126 580.932 315.786 586.004 cv
315.623 588.445 314.989 592.292 313.146 592.726 cv
309.783 593.517 306.523 587.532 305.223 585.044 cv
304.323 583.322 303.779 581.508 303.062 579.521 cv
302.362 577.586 301.205 575.313 301.621 573.28 cv
302.577 568.613 310.603 569.75 315.066 571.6 cv
cp
f
336.674 574.961 mo
336.604 579.168 336.73 582.76 336.194 587.204 cv
335.833 590.19 334.929 595.579 332.353 595.847 cv
329.419 596.151 326.738 590.039 325.63 587.204 cv
324.962 585.496 324.235 583.652 323.709 581.442 cv
323.219 579.383 322.629 576.168 323.229 574.721 cv
324.96 570.545 333.304 572.99 336.674 574.961 cv
cp
f
359.002 579.282 mo
358.662 583.485 358.146 586.882 357.082 591.045 cv
356.379 593.791 354.95 599.729 351.799 599.447 cv
350.801 599.358 349.093 597.174 348.438 595.847 cv
347.481 593.905 346.695 590.867 346.037 587.444 cv
345.147 582.81 344.171 576.548 348.438 575.681 cv
352.355 574.885 356.539 577.416 359.002 579.282 cv
cp
f
195.503 618.413 mo
190.086 618.17 186.355 615.01 183.019 612.411 cv
179.64 609.779 176.487 606.869 173.655 604.009 cv
174.478 599.018 178.105 593.241 182.058 591.766 cv
185.106 590.627 188.058 594.406 189.741 596.807 cv
191.29 599.016 192.245 601.386 193.342 603.528 cv
194.47 605.732 195.705 608.083 196.463 610.73 cv
197.223 613.384 198.042 616.509 195.503 618.413 cv
cp
f
31.0435 610.49 mo
25.062 612.032 18.5923 613.085 12.7969 614.812 cv
19.0571 616.074 25.1172 617.536 31.2832 618.893 cv
31.1245 616.171 31.6025 612.813 31.0435 610.49 cv
cp
51.2104 605.93 mo
47.5957 606.956 43.5986 607.601 39.9268 608.57 cv
39.9268 612.571 39.9268 616.572 39.9268 620.573 cv
43.2144 622.008 47.6758 622.268 51.2104 623.454 cv
51.2104 625.615 51.2104 627.775 51.2104 629.936 cv
34.3936 625.945 17.6992 621.833 .79248 617.933 cv
.79248 615.692 .79248 613.451 .79248 611.211 cv
17.6035 607.375 34.3115 603.436 50.9707 599.447 cv
51.5288 601.13 51.0522 603.848 51.2104 605.93 cv
cp
f
21.1997 658.264 mo
19.0347 654.977 10.9092 655.891 9.67578 658.984 cv
8.57471 661.744 10.0044 665.248 9.43555 668.827 cv
13.5972 668.827 17.7583 668.827 21.9199 668.827 cv
21.5049 664.375 22.7446 660.609 21.1997 658.264 cv
cp
50.9707 647.701 mo
51.5293 649.783 51.0518 652.901 51.2104 655.383 cv
46.7266 656.823 40.2783 659.411 35.125 661.625 cv
32.0986 662.925 29.4756 663.764 30.083 668.587 cv
36.6455 669.146 44.248 668.667 51.2104 668.827 cv
51.2104 670.827 51.2104 672.828 51.2104 674.828 cv
34.4043 674.828 17.5986 674.828 .79248 674.828 cv
1.68896 667.628 -.806152 660.581 1.75293 655.383 cv
5.50684 647.758 27.2974 647.966 28.6426 657.784 cv
30.041 657.534 31.0986 655.848 32.7241 654.903 cv
37.8467 651.925 44.8828 650.512 50.4902 647.941 cv
50.7695 647.98 50.9175 647.889 50.9707 647.701 cv
cp
f
517.22 735.565 mo
505.848 743.669 500.193 761.162 497.052 778.058 cv
494.533 791.607 493.21 810.354 493.211 827.512 cv
493.211 844.411 493.801 862.809 496.332 877.686 cv
498.816 892.287 504.4 907.99 515.299 912.015 cv
524.781 915.517 531.921 908.931 536.906 905.053 cv
563.149 884.642 567.591 837.264 563.796 791.501 cv
562.969 781.525 561.62 772.003 559.475 763.894 cv
555.593 749.225 546.983 729.481 528.264 731.484 cv
523.853 731.956 520.006 733.579 517.22 735.565 cv
cp
536.906 922.098 mo
532.496 926.209 527.855 930.07 519.62 927.379 cv
512.151 924.938 506.154 917.771 501.854 910.814 cv
497.223 903.323 493.695 895.755 490.81 887.528 cv
487.87 879.146 485.431 869.814 484.808 859.2 cv
484.179 848.498 484.25 837.052 484.808 825.351 cv
485.844 803.616 487.673 782.634 491.53 763.413 cv
494.324 749.493 497.904 735.599 505.936 726.443 cv
508.543 723.47 511.841 720.418 515.059 718.521 cv
518.053 716.755 522.095 715.866 525.382 715.64 cv
537.15 714.829 545.13 720.25 551.071 726.443 cv
568.677 744.792 572.466 779.159 573.64 813.107 cv
574.473 837.189 572.188 860.557 567.157 879.605 cv
564.672 889.018 561.568 898.276 556.834 905.773 cv
552.226 913.07 546.282 920.089 536.906 922.098 cv
cp
f
360.442 860.881 mo
362.225 859.901 364.266 859.396 365.964 858.479 cv
369.666 856.484 372.442 854.1 375.328 851.518 cv
376.82 850.183 378.503 849.098 379.649 847.677 cv
380.803 846.247 381.838 844.387 383.011 842.636 cv
391.182 830.434 398.9 817.771 402.458 801.584 cv
404.59 791.881 404.935 779.99 403.418 770.135 cv
401.926 760.441 399 750.839 393.814 745.168 cv
390.185 741.199 383.377 736.823 374.848 737.486 cv
368.381 737.989 356.718 742.758 354.44 747.329 cv
352.976 750.268 353.546 756.502 353.24 761.253 cv
351.228 792.494 350.664 826.545 351.56 858.72 cv
351.62 860.9 351.323 863.445 352.76 865.202 cv
356.21 865.804 357.761 862.354 360.442 860.881 cv
cp
351.079 927.619 mo
348.724 927.414 345.48 928.097 343.876 927.139 cv
342.594 923.807 343.32 920.709 343.396 917.297 cv
343.563 909.889 342.73 901.709 342.196 894.01 cv
341.934 890.224 341.779 886.28 341.235 882.727 cv
340.676 879.072 338.995 875.763 339.075 872.884 cv
339.152 870.118 341.354 868.257 341.716 866.162 cv
342.474 861.763 341.716 856.044 341.716 850.798 cv
341.716 821.022 341.716 789.891 341.716 759.332 cv
341.716 754.237 342.331 748.836 341.716 744.208 cv
341.271 740.861 338.909 737.973 337.875 734.365 cv
339.758 730.947 341.169 726.908 345.797 725.242 cv
349.392 723.949 354.792 724.647 359.482 724.282 cv
363.999 723.932 368.425 722.688 371.727 722.122 cv
381.816 720.392 389.67 725.408 394.775 730.765 cv
403.27 739.678 408.046 750.982 411.101 764.854 cv
412.615 771.729 414.208 779.482 414.222 786.939 cv
414.232 792.853 412.874 799.022 411.821 804.465 cv
406.514 831.893 395.228 854.937 376.769 869.043 cv
371.102 873.373 365.351 877.146 358.042 880.326 cv
355.912 881.253 352.337 882.182 351.56 883.687 cv
350.454 885.827 351.079 890.952 351.079 894.49 cv
351.079 905.339 351.079 917.913 351.079 927.619 cv
cp
f
450.235 746.368 mo
449.205 806.395 450.162 868.412 449.515 928.819 cv
446.966 928.809 445.16 927.984 443.513 926.659 cv
442.084 925.51 440.334 923.914 439.911 922.098 cv
439.611 920.811 440.1 918.936 440.151 917.057 cv
440.729 896.286 439.671 875.124 439.671 854.398 cv
439.671 846.951 439.729 839.284 439.432 831.832 cv
438.528 809.265 438.947 786.505 438.711 763.894 cv
438.672 760.206 438.678 756.248 438.471 752.61 cv
438.308 749.739 438.256 746.021 435.59 744.208 cv
430.619 743.863 428.194 745.42 424.306 746.849 cv
421.307 747.951 416.438 750.486 412.781 748.77 cv
407.638 746.354 409.8 733.323 413.502 731.244 cv
416.104 729.783 421.121 730.942 424.786 730.765 cv
432.302 730.398 440.751 728.414 449.515 726.923 cv
458.651 725.369 467.624 724.367 473.523 722.362 cv
479.138 720.453 482.97 729.204 481.446 735.565 cv
480.283 740.423 477.497 740.947 471.843 741.808 cv
464.119 742.982 456.071 743.121 450.235 746.368 cv
cp
f
699.445 723.563 mo
699.649 723.518 699.672 723.656 699.686 723.803 cv
701.777 724.576 702.024 725.513 703.047 726.923 cv
704.011 728.254 705.271 729.597 705.447 730.765 cv
705.63 731.964 704.942 734.622 704.487 737.006 cv
695.858 782.159 688.439 827.962 681.679 875.284 cv
680.033 886.801 678.342 899.729 676.877 912.495 cv
676.319 917.356 676.4 923.049 673.996 924.258 cv
668.158 927.196 664.789 917.17 663.672 913.215 cv
661.76 906.445 661.02 900.558 659.831 894.97 cv
657.31 883.122 654.812 869.956 652.628 858 cv
650.386 845.721 647.884 832.772 646.146 820.069 cv
644.364 807.047 643.385 794.03 638.943 783.099 cv
635.241 793.565 633.385 805.497 631.74 817.908 cv
627.676 848.598 623.617 879.403 619.496 910.814 cv
619.17 913.305 618.726 916.641 618.296 920.177 cv
617.903 923.408 617.557 927.341 616.615 928.819 cv
616.552 928.92 615.269 930.025 614.935 930.26 cv
610.712 933.234 608.04 927.103 606.531 922.578 cv
602.885 911.637 600.804 897.57 599.089 885.607 cv
596.61 868.313 594.471 850.6 591.887 833.753 cv
589.291 816.836 586.272 799.768 583.724 782.858 cv
581.78 769.972 579.932 757.275 577.001 745.168 cv
576.049 741.234 574.777 736.928 576.521 732.925 cv
580.166 732.539 584.358 732.463 586.364 734.125 cv
589.794 736.968 589.156 747.042 589.485 754.291 cv
589.823 761.727 590.949 768.568 591.887 774.937 cv
595.963 802.625 600.21 828.081 604.371 855.119 cv
605.885 864.959 607.009 875.165 608.212 885.848 cv
608.563 888.967 608.751 892.384 610.854 894.73 cv
616.2 859.652 621.777 823.402 627.179 787.9 cv
627.946 782.859 629.124 777.752 629.58 772.776 cv
630.503 762.698 629.637 750.581 633.901 742.768 cv
643.735 740.475 645.088 749.791 646.386 758.372 cv
647.459 765.463 648.007 771.975 648.787 778.058 cv
650.485 791.305 652.991 804.185 655.029 816.229 cv
659.443 842.311 663.323 868.161 668.954 890.889 cv
675.229 865.604 679.463 837.482 684.319 808.065 cv
687.722 787.461 691.563 766.472 694.163 744.208 cv
694.555 740.863 694.999 737.226 695.604 733.405 cv
696.346 728.718 696.561 724.85 699.445 723.563 cv
cp
f
255.044 736.046 mo
253.708 770.979 250.907 807.12 252.403 844.556 cv
253.442 870.542 254.591 898.391 273.291 907.693 cv
280.194 911.128 288.567 910.91 295.859 907.214 cv
304.807 902.677 307.781 882.999 309.304 870.964 cv
311.159 856.302 311.705 840.079 311.705 824.391 cv
311.705 794.413 310.094 765.051 307.863 736.525 cv
307.705 734.495 307.177 731.958 307.383 731.004 cv
307.727 729.416 313.197 724.703 315.066 724.522 cv
321.576 723.893 321.548 739.538 321.548 746.129 cv
321.548 764.877 320.48 782.872 321.309 801.104 cv
321.727 810.316 321.308 819.648 321.309 828.951 cv
321.309 846.509 320.931 865.625 319.147 882.967 cv
317.407 899.89 312.78 914.951 302.341 922.098 cv
301.273 922.829 300 923.556 298.98 924.019 cv
291.057 927.608 281.122 925.428 273.291 921.857 cv
258.141 914.951 249.909 903.976 246.642 885.127 cv
243.405 866.456 242.23 848.092 241.6 826.791 cv
240.851 801.506 240.639 775.731 240.639 748.529 cv
240.639 743.519 240.021 735.582 241.84 733.885 cv
245.579 730.397 252.005 733.706 255.044 736.046 cv
cp
f
21.1997 735.806 mo
19.0933 732.614 11.0527 733.33 9.67578 736.525 cv
9.20166 737.625 9.4502 739.501 9.43555 741.087 cv
9.41992 742.774 9.44727 744.492 9.43555 746.368 cv
13.5972 746.368 17.7583 746.368 21.9199 746.368 cv
21.4922 742.132 22.7158 738.103 21.1997 735.806 cv
cp
50.9707 725.242 mo
51.5293 727.324 51.0518 730.443 51.2104 732.925 cv
46.7266 734.364 40.2783 736.953 35.125 739.167 cv
32.1128 740.46 29.4995 741.358 30.083 746.129 cv
36.6455 746.688 44.248 746.209 51.2104 746.368 cv
51.2104 748.369 51.2104 750.37 51.2104 752.37 cv
34.4043 752.37 17.5986 752.37 .79248 752.37 cv
1.61719 745.41 -.702637 737.912 1.75293 732.925 cv
5.53711 725.237 27.3848 725.502 28.6426 735.325 cv
30.041 735.076 31.0986 733.39 32.7241 732.444 cv
37.8452 729.468 44.8682 728.042 50.4902 725.482 cv
50.7695 725.521 50.9175 725.43 50.9707 725.242 cv
cp
f
777.474 909.134 mo
778.933 902.171 778.435 894.814 778.434 887.528 cv
778.432 836.087 777.94 782.058 778.193 730.044 cv
781.018 728.079 784.438 728.282 787.317 730.044 cv
787.036 762.929 787.967 796.171 786.597 828.712 cv
786.261 836.699 786.745 845.091 786.356 853.438 cv
785.577 870.186 785.943 884.917 786.356 902.172 cv
786.528 909.352 787.954 921.561 782.275 922.338 cv
779.34 922.739 776.509 919.884 774.593 917.776 cv
768.862 911.477 764.926 902.812 761.388 894.73 cv
749.214 866.925 740.789 834.252 733.058 801.824 cv
731.552 795.509 730.438 789 727.295 783.579 cv
725.022 805.341 724.895 828.576 724.895 852.719 cv
724.895 869.722 724.954 889.07 725.135 906.253 cv
725.166 909.231 724.999 912.264 725.135 915.136 cv
725.269 917.964 725.846 920.861 725.375 923.298 cv
725.167 924.374 723.117 930.291 720.573 930.02 cv
717.227 929.663 717.176 918.51 716.972 914.416 cv
716.5 904.96 716.731 892.193 716.731 882.967 cv
716.732 847.995 717.211 816.221 717.212 781.898 cv
717.212 769.853 716.826 757.048 716.251 744.688 cv
716.055 740.467 716.002 734.565 716.731 732.205 cv
717.51 729.687 721.061 725.551 723.214 725.482 cv
726.717 725.372 728.622 731.096 729.456 734.125 cv
730.854 739.199 731.295 742.243 732.097 746.368 cv
736.982 771.494 742.501 796.655 747.942 819.829 cv
751.873 836.566 755.631 852.054 759.947 867.362 cv
762.109 875.031 764.423 882.703 767.39 889.688 cv
770.366 896.696 772.985 903.709 777.474 909.134 cv
cp
f
31.0435 784.06 mo
25.1113 785.65 18.5688 786.63 12.7969 788.38 cv
19.0576 789.643 25.0967 791.126 31.2832 792.462 cv
31.1245 789.74 31.6025 786.381 31.0435 784.06 cv
cp
50.9707 773.016 mo
51.5288 774.698 51.0522 777.416 51.2104 779.498 cv
47.6021 780.531 43.623 781.193 39.9268 782.139 cv
39.9268 786.14 39.9268 790.141 39.9268 794.142 cv
43.2539 795.536 47.6313 795.88 51.2104 797.022 cv
51.2104 799.184 51.2104 801.344 51.2104 803.505 cv
34.4009 799.507 17.7017 795.399 .79248 791.501 cv
.79248 789.261 .79248 787.02 .79248 784.779 cv
17.6006 780.94 34.3281 777.021 50.9707 773.016 cv
cp
f
41.8472 833.513 mo
39.561 829.321 28.7334 828.965 21.4399 829.432 cv
12.6196 829.996 7.95508 832.834 9.43555 842.636 cv
20.4795 842.636 31.5234 842.636 42.5674 842.636 cv
42.3838 839.688 43.0605 835.737 41.8472 833.513 cv
cp
51.2104 848.637 mo
34.4043 848.637 17.5986 848.637 .79248 848.637 cv
1.47266 842.655 -.478027 835.91 1.75293 831.353 cv
4.29688 826.153 13.8501 823.682 21.6797 823.19 cv
32.2329 822.527 46.6665 824.179 50.2505 831.593 cv
52.6431 836.542 50.4224 841.896 51.2104 848.637 cv
cp
f
51.2104 871.443 mo
51.2104 879.126 51.2104 886.808 51.2104 894.49 cv
34.4043 894.49 17.5986 894.49 .79248 894.49 cv
.79248 886.968 .79248 879.445 .79248 871.924 cv
3.67334 871.924 6.55469 871.924 9.43555 871.924 cv
9.43555 877.445 9.43555 882.967 9.43555 888.488 cv
13.0366 888.488 16.6382 888.488 20.2393 888.488 cv
20.7993 883.767 20.3198 878.006 20.4795 872.884 cv
23.2803 872.884 26.0815 872.884 28.8823 872.884 cv
28.8823 878.086 28.8823 883.287 28.8823 888.488 cv
33.3643 888.488 37.8457 888.488 42.3276 888.488 cv
43.0474 883.366 42.0879 876.565 42.8076 871.443 cv
45.6084 871.443 48.4097 871.443 51.2104 871.443 cv
cp
f
14.4775 917.297 mo
15.7231 918.852 16.0439 921.331 17.1182 923.058 cv
13.5181 924.313 9.28223 925.049 8.71533 928.819 cv
8.25293 931.895 10.6582 934.465 12.7969 935.541 cv
17.5806 937.95 31.1323 938.572 38.0059 936.021 cv
40.8452 934.968 43.2295 932.76 43.2876 930.26 cv
43.4097 925.017 37.5869 924.347 32.4839 923.298 cv
33.4858 921.259 34.6187 919.352 35.605 917.297 cv
42.8613 918.612 49.0854 920.853 51.2104 925.699 cv
53.9165 931.869 49.9644 936.743 46.8892 938.902 cv
36.6885 946.063 10.3701 945.379 2.71289 936.742 cv
-1.02393 932.526 -.0444336 925.885 2.23291 923.058 cv
4.85645 919.802 9.47461 918.383 14.4775 917.297 cv
cp
f
244.48 953.066 mo
425.738 953.066 607.027 953.066 788.277 953.066 cv
788.277 956.268 788.277 959.468 788.277 962.669 cv
607.105 962.669 425.887 962.669 244.721 962.669 cv
243.854 962.072 244.241 959.878 244.241 958.348 cv
244.241 956.775 244.241 955.136 244.241 953.786 cv
244.22 953.446 244.201 953.106 244.48 953.066 cv
cp
f
648.547 993.397 mo
646.473 993.965 644.618 994.751 642.545 995.318 cv
641.597 990.843 639.595 986.235 633.901 987.636 cv
624.367 989.981 623.997 1021.18 635.102 1021.97 cv
639.142 1022.25 640.741 1019.98 643.024 1017.64 cv
643.024 1015.56 643.024 1013.48 643.024 1011.4 cv
640.624 1011.4 638.223 1011.4 635.822 1011.4 cv
635.822 1008.52 635.822 1005.64 635.822 1002.76 cv
640.224 1002.76 644.625 1002.76 649.027 1002.76 cv
649.027 1009.48 649.027 1016.2 649.027 1022.93 cv
645.204 1027.06 642.349 1030.95 635.342 1030.61 cv
616.258 1029.67 617.329 988.038 629.34 980.434 cv
633.537 977.776 640.539 978.428 643.985 981.874 cv
646.706 984.595 647.644 988.459 648.547 993.397 cv
cp
f
786.597 994.118 mo
784.564 994.246 782.563 994.404 780.595 994.598 cv
780.023 992.184 780.34 989.917 778.434 988.356 cv
774.768 985.354 768.506 988.437 770.031 993.638 cv
771.313 998.014 779.044 998.651 782.516 1001.56 cv
789.304 1007.25 788.352 1022.96 782.995 1027.97 cv
779.371 1031.36 771.698 1031.57 767.87 1028.21 cv
764.219 1025 763.466 1020.15 762.588 1013.32 cv
764.606 1013.02 766.61 1012.7 768.59 1012.36 cv
769.48 1016.86 769.796 1020.54 773.152 1021.73 cv
778.856 1023.75 783.112 1017.71 780.835 1012.36 cv
779.255 1008.66 772.145 1008.08 768.59 1005.16 cv
760.727 998.714 762.352 979.861 773.632 978.754 cv
781.689 977.963 786.648 984.315 786.597 994.118 cv
cp
f
272.811 979.474 mo
272.811 982.354 272.811 985.235 272.811 988.116 cv
267.849 988.116 262.887 988.116 257.925 988.116 cv
257.925 991.957 257.925 995.798 257.925 999.64 cv
261.768 1000.2 266.648 999.72 270.89 999.88 cv
270.89 1002.76 270.89 1005.64 270.89 1008.52 cv
266.648 1008.52 262.407 1008.52 258.166 1008.52 cv
257.605 1015.16 258.085 1022.85 257.925 1029.89 cv
255.925 1029.89 253.924 1029.89 251.923 1029.89 cv
252.083 1013.16 251.603 995.799 252.164 979.474 cv
259.046 979.474 265.928 979.474 272.811 979.474 cv
cp
f
311.945 999.88 mo
314.846 997.986 314.861 990.224 311.225 988.597 cv
308.183 987.235 305.59 988.606 301.381 988.116 cv
301.381 992.277 301.381 996.438 301.381 1000.6 cv
305.698 1000.11 309.47 1001.49 311.945 999.88 cv
cp
312.425 1007.32 mo
312.671 1008.71 314.363 1009.78 315.306 1011.4 cv
318.374 1016.68 319.772 1023.96 322.509 1029.65 cv
320.427 1030.21 317.308 1029.73 314.826 1029.89 cv
313.386 1025.4 310.797 1018.96 308.584 1013.8 cv
307.294 1010.8 306.418 1008.15 301.621 1008.76 cv
301.061 1015.32 301.541 1022.93 301.381 1029.89 cv
299.38 1029.89 297.38 1029.89 295.379 1029.89 cv
295.539 1013.16 295.059 995.799 295.619 979.474 cv
303.407 980.234 312.1 977.745 316.267 981.395 cv
322.198 986.589 321.851 1005.79 312.425 1007.32 cv
cp
f
343.876 979.474 mo
345.797 979.474 347.718 979.474 349.639 979.474 cv
349.639 996.278 349.639 1013.08 349.639 1029.89 cv
347.638 1029.89 345.637 1029.89 343.637 1029.89 cv
343.637 1013.32 343.637 996.759 343.637 980.194 cv
343.616 979.854 343.597 979.514 343.876 979.474 cv
cp
f
378.929 988.836 mo
378.929 999.64 378.929 1010.44 378.929 1021.25 cv
381.877 1021.06 385.813 1021.74 388.053 1020.53 cv
391.833 1018.48 392.202 1010.46 392.134 1003.96 cv
392.069 997.781 391.376 990.333 387.332 988.597 cv
384.786 987.503 382.438 988.508 379.169 988.116 cv
378.89 988.156 378.909 988.496 378.929 988.836 cv
cp
373.167 979.474 mo
378.983 979.898 385.305 978.532 389.733 980.434 cv
396.368 983.283 398.324 994.537 398.376 1004.2 cv
398.427 1013.61 396.74 1025.24 390.213 1028.69 cv
385.406 1031.23 379.804 1029.23 372.927 1029.89 cv
372.927 1013.32 372.927 996.759 372.927 980.194 cv
372.907 979.854 372.887 979.514 373.167 979.474 cv
cp
f
429.107 1009.96 mo
431.908 1009.96 434.709 1009.96 437.511 1009.96 cv
436.063 1003.81 434.893 997.375 433.188 991.478 cv
431.927 997.736 430.464 1003.8 429.107 1009.96 cv
cp
436.79 979.474 mo
440.606 996.384 444.646 1013.07 448.555 1029.89 cv
446.394 1029.89 444.232 1029.89 442.072 1029.89 cv
441.051 1026.27 440.412 1022.26 439.432 1018.6 cv
435.43 1018.6 431.428 1018.6 427.427 1018.6 cv
426.007 1021.91 425.714 1026.33 424.546 1029.89 cv
422.385 1029.89 420.225 1029.89 418.063 1029.89 cv
422.19 1013.13 425.96 996.013 430.308 979.474 cv
432.469 979.474 434.629 979.474 436.79 979.474 cv
cp
f
466.081 979.714 mo
467.923 979.155 470.801 979.633 473.043 979.474 cv
475.568 985.751 477.652 992.47 480.246 998.679 cv
482.829 992.539 484.745 985.732 487.208 979.474 cv
489.529 979.474 491.85 979.474 494.171 979.474 cv
491.572 986.596 488.565 993.935 485.768 1001.32 cv
484.894 1003.63 483.475 1006.3 483.127 1008.52 cv
482.067 1015.29 483.908 1022.14 483.127 1029.89 cv
481.126 1029.89 479.125 1029.89 477.125 1029.89 cv
476.375 1022.13 478.142 1015.31 477.125 1008.52 cv
476.801 1006.36 475.413 1003.74 474.483 1001.32 cv
471.905 994.613 468.69 986.245 466.081 979.714 cv
cp
f
550.352 979.474 mo
554.426 990.604 558.693 1001.54 562.596 1012.84 cv
563.156 1002.2 562.676 990.517 562.836 979.474 cv
564.757 979.474 566.677 979.474 568.598 979.474 cv
568.598 996.278 568.598 1013.08 568.598 1029.89 cv
566.518 1029.89 564.437 1029.89 562.355 1029.89 cv
558.424 1018.94 554.122 1008.35 550.352 997.238 cv
549.791 1007.64 550.271 1019.08 550.111 1029.89 cv
548.19 1029.89 546.27 1029.89 544.35 1029.89 cv
544.509 1013.16 544.029 995.799 544.589 979.474 cv
546.51 979.474 548.431 979.474 550.352 979.474 cv
cp
f
592.847 979.474 mo
594.768 979.474 596.688 979.474 598.608 979.474 cv
598.608 996.278 598.608 1013.08 598.608 1029.89 cv
596.608 1029.89 594.607 1029.89 592.606 1029.89 cv
592.606 1013.32 592.606 996.759 592.606 980.194 cv
592.586 979.854 592.566 979.514 592.847 979.474 cv
cp
f
678.317 979.474 mo
678.317 985.955 678.317 992.438 678.317 998.919 cv
681.84 999.479 686.4 999 690.322 999.159 cv
690.882 993.077 690.402 985.956 690.563 979.474 cv
692.563 979.474 694.563 979.474 696.564 979.474 cv
696.564 996.278 696.564 1013.08 696.564 1029.89 cv
694.563 1029.89 692.563 1029.89 690.563 1029.89 cv
690.563 1022.61 690.563 1015.32 690.563 1008.04 cv
686.96 1007.48 682.319 1007.96 678.317 1007.8 cv
678.317 1015.16 678.317 1022.53 678.317 1029.89 cv
676.316 1029.89 674.316 1029.89 672.315 1029.89 cv
672.476 1013.16 671.995 995.799 672.556 979.474 cv
674.477 979.474 676.396 979.474 678.317 979.474 cv
cp
f
742.181 979.474 mo
742.181 982.354 742.181 985.235 742.181 988.116 cv
739.3 988.116 736.419 988.116 733.537 988.116 cv
732.978 1001.56 733.457 1016.04 733.298 1029.89 cv
731.297 1029.89 729.296 1029.89 727.295 1029.89 cv
727.295 1015.96 727.295 1002.04 727.295 988.116 cv
724.334 988.116 721.373 988.116 718.412 988.116 cv
718.571 985.314 718.093 981.876 718.652 979.474 cv
726.495 979.474 734.338 979.474 742.181 979.474 cv
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 14.0%%AI8_CreatorVersion: 14.0.0%%For: (Danielle Ameling) ()%%Title: (uptowns_logo_white_livetrace.eps)%%CreationDate: 1/25/11 10:53 PM%%Canvassize: 16383%AI9_DataStream%Gb!R&kB?,]ZS;=5!;?K%Z,nC;!Oa^##97a/,hj.EQn\-uoAa*Q=4OF3,Xe"WcZqZhf[+A5<EE8e:u-SMIPC/u3rRD&i'1poPY3:8%;*H.K'7A4Y8dUR9J(V;HO3P).=HZIUYc8NR=c%e-:m<4Y#r.1r,^?XTBMO'2rQ3#lctnc`KgBW2)Q,atgem(5h!)5iK@*JCianMp%K7tlNQCi>HXg@7fUHM4rGu;Ffrf+R81Tl59dpDU9(*E4=]kONqdAo4\XeQt_4N7WS)u3fU:F8?r3:1:.Peu\&M4P,(Q2_4S?*umY%j2n5`km[DA5oJct0`7o2\moPn8r-'/+F9da_o?pmn0Xr!N#+M2/$\T"Q]h!;lh8Z/=.ci+P?:,ts"DuS<`9d>JeSl^/-k'1W>Nr.%"g>]fl'DN+i%pM0UN*R;=/Z"@g3["AG5@E=pkpoiU=5nhc&F'XcMt6XC5/FSoZ>Xjf,ic?3tl9;.8%uh:C""F0C@lNpWL62Ef;1A%Z.^S-E*XQ6[O31,KAI<1Q1cO>%+&Y;qOdJ;Z5XCG&)7'K_(D??b))&g9-k4FQPBZ>A;:c19T4`k0+3Bm9dKoq-PCe.'F?4R"BP>o%GRu@A<03f@>sN>#O#io(ITe'uHE2uc/PQ:35*PVkZmM*grL[!eVdol7-BiU[D?bo-iDbHI0X9(F7<&2/;VJ<uJ:/t(RnJ&n$N,12%V1,[5WC(Z_'tf=hs*4-b-7G8jr:)muMB[MH;YXBC.&Fuor5>KqO&(%m4tW,kD>KPH@P(Hq?_W@a6kO3k@_&SU9Vnsg.YW"Cn:tq[%;HPH7_HQ^D5I"7_J@,^fI'ZYb-\VWQ.@9R=\L`X5G.ERXb@UM[V3o\(l(JsY;g_MhcLW)AIUXmF'7OCBCm3:Fq@$S]T3)>&KV-n7%KbO)aC_M9W05M5L+sb;Y$5m'$T@e&Z(JD#-Lm)kCil>6T0)WXKjYE,NrI^>5*`F[h0&\1+PI?uZ:MH`6;=$iadRQn=qM2J_IJAY\%BFiNldq?&.n6`8Nm8J=uEeV5cmDD`tKrq-KO.VYW/AY,`L$ccRg5Ap&-snEP`2L`W;Qe*%dV"e.b&sdSq53Y8[[^6VPZ,.A?4'j"%03Ua=_`HF275D,jpbltHI>[F0:TR"H)r!l.6JoaXXFmYHp_CnOFGFms@\D/OaKQj=MR4Pg<)TYG.!hTZ.HNXfNcL]MV0kYQPo`fV%7VTnH$?ccI^/(BM5>!rd9Ie;ocREc\KJN@unuHIdIE1ALZrPR+Khn0(;s@?D?B[U$>E^4!e$WL_\?,?*;P\7Ehq#<2d&PHni2(DW%Rk2aE5Q$jO799EJ3;Q&?Qi<['_a!NqqWIAr'!t((Qi9PhrN6#ks,otM4.0&e-fr*JN]tkiV18;'rN6#ks#g9iOd9\\d_A\:rmq(F%IuO4om5ak\IaW\A^Qi0u?YCN/'SJlb=@R`lp^'*ie9h5a]NpUI(]C1Z$[jf/<Z(aB3&OaL22$[s_'aZ.IO@q,nP=osmNB:%c3@)a%@P<NA4D3_Ho'N/1Kh%EU?ogF8IgeGj>\h]"H`opVV1![9)rL&F,j5]Y"kpH>ZnlF:lCDA1&J,'jUUHLQKU9eVjkolP(Y^#CA8ABt%dSg+KG&K(aJQ5A.rKd2\4rV]O%<6U,54XkW'lp_R(HeZ!O#5KmR1#\\ad4sDC\M%C'dilnKLa5J_lGXLS/ZbFUZqQsHT`5<<3XA4%.Wi4gP[aUk%NH;GL&Q@i12%Ge>eu@*@f$*c/5Y(B"$HL"L0ghQHC`AZIJD?,=s:+pY%"-O((mW45E.t41]Ge_8QTq0+&+f@?G#oD%4DFgT5soO;FS[R#6t16pC'Qsj*8#UR?hIis^moe;8^3\20_#@%;/c<*;.lAcU/,_f3r.6WThkT^5PVidIX'>5^_7Q]qQr2,$$tWE%oq/ZOiec8J0Q_1_<>b28LQR@B?2/U);20]N*bAU!Gjk[JO(7tU%7Pbn"n/Gbl%SZ9T_/6+K7h2@Q7#FedB:M/#INtR+V7hQOZ0b/%(\JgX!S`9`Mh]8ijo@skHY2CR/t/Ai]S]+.[0R#<!)CkKR5U-6bB+KBcpq'<&Bt/%(BYdYTabt/<b7SKqUr?fnf)lgIs%4$NV_iL%q&O]@D7;RT+0RShJAQ9Smkb8$OFe'jc2c5-H;urC)11K(3Cr_[W',#o]I6$2OJ#`%]]b>^[Hfto?s%?TBH>)3c\(M."$cHuQPQhu%d<IX<Qtk/;eS()`H/hC[7A)O)`+W"7/nkfA,?hC21ja;mahW7'#GiD_rhjUb#lO6'6.\T_ET^ug,;Q"A6,6n<d-ScF5&,A43(p#u%+O>%>.Q;+oF3rRSPc!V5UUnZQ7;kFe@PlliB!@Ye11MW,G]acP87"rfdp!4pH/iouaR)m1+sNF_O\bNtd7QV<lM\K_j-n]mq#+q"%$p)p:%KQ!JIX6Ee*//8NFW/_#HT]cQIi?6Di9P,8^H0'ZW%IbD+u[SBr0[C"b010.pW%3%eOSY*NT#VlJ(8mEV(S'pD<gdo/W_D!%)h.`-j\C<PDnBCNDp[jZ>AcEqe6J2F0&*NuLWlU$0%pNH!JZXR\bYXAf3VDMYK.%$OV=nOhl/P\D)[&2[o`S_.=1hDf;aj2s(.&,%ju''sal)@>[:K<-*2^c!N)27A!>TZ+NrQUq!%n4>V#8!#V;mWOs,4S\^T7Y"?DmUKh%m=*cbr4(V%+%&)Z/(QI"&V'0=BrWCPATa%+ssSdg\#cg2>M:A/@jcTgF?d@6#p;<ro6Tis7PNq4!s*tk)Z"_r;!g+UCNm_RaDsG+=O1s5:1K+hG(%_ht\o2!/Ta;%Aon4S*Yk)%f-::b;u\`^5OD%U"Td#NFJMs5A$[IW5.H_-?"GQ!'+$j248%TE]aY^;DA%_9]a>TpB0<t(5>\UZL38NA]6tNJ%]0p.-XAVRh2l"Y%COd+h[`;b?r"5>>dS5qI;brq!-1-QO!.)9E[dH[(&bCs4Nq;LG#_Y6;_W`1=7eQb*=GLd2rW*?e/alf4#+A2=`oafpU2/Q>\n^8-%6[t3>_pMh.mreLl'5sl#RFE1H?>&iL37hb""'Mc#5H"2#[eF5b<-g76$8EmIkesZo4"=$Q4ltMSp1OjsK;Z'(_0A2o8PP;*?Dl]S%:4TEK](IqM^!70mM.;_K5V#&"qH/SmFQDap)3LMLrmbm]J2`I6YMO2dmC;DGTu*_D?gZ5PkC(D=)DIbA#2Q^+pOZL)#GY>37I@M>%7=!p+K8JPAX64rrU?4Tt+kKZ9H#lJ(WW[*3O-QuNFfdEC%Nu0$j-mlBIh*GP&2)IWZ["<-)hO<)8pn(,eomo/[]J?O3S,0n42V9p%=?#G7g8GIn)Rls\,Bmf9Q'&TmR%9!k^T"l>CYQ"l=1Hn'4D<ZiP8CbK1j:D9$3tR6qg>9I=T'4cJ"VXo\'l^n0Go"u:9dr0d&ei1%1)s=.An7un$<N<(mRj[%;SppEC,4hY<717@7FU";>.ZPi[lS20E9Wo3J!6!P(hWVB'mYG4RJ7CL@cj$>Z[agb,nF[#HR?tf[8]a]%Y@ofFbbEW(jVE8[5.d+7"iK:I7OPn92%AlYkdm>OZ(V,-lHJpC__!<K>>%33$l%G<d'AtHn]+iRFoF^uGLBfF?OMT*.hk\k-2*Vr%KNPL7<$F&JCWg1[D&-Mt'`3HjSHp1B@Y<'@b`R.\c<iVVBjGN0XS:EUXL\$'EhJq%)YTVLlm7A:C%fSB/;6+uLf8C]k,cLLrcDX[%>SWi/#NF9WCJLG_BJ?e@q4g02[<dQ[Z)faQ2O%84<g^n3*k8>D""iP8UP#T2=JapSXD;UG2O0_`re)gQ3Rm;ukYCE,)1,hm2u]h0%Rr)pVd'=Dk8,`/6C]O.9r\KM$__J2Q)"ZDo%M]2ck$Ur<YsZu3L"=c$IlM*q]^Dl:&2F5IVZ!ABK0X2'qgE$UhE'"-[H:WNk)[f,%"E%\VR.mc>!(R5j>g*!aW84"O49rQLER#7!R,M`Jd8<l$ZUP*A8\:aV0+GO!S7"]Xfd7c]i.#CtO!d*0Toe2&$1m:5'46shCOP:+%SRDmdfB^$qC=mP9S9CCu#+N!kGo]TB!@.+hEE@4U=KOt`E3;4LI$g/&osqF^SX5f23sQiLj7["i[4bH9b8@qC*d9gFp"A<4AME#'%kG=[kP);:4G-"ae2`d.p\qA8DWjL'm'MmCBE3R(gVG(s8N<?.^;iU6Sf[FpZp/$7!0k#J?HDpT>-M2(-qB&j&Chf*+KH?FR'EJpA%lGNGFL0W%J66P-nh8aXpGPX\_1Jo9s2r2+K>rLq@eGbMK#tq8<Wh@cW_&K.8CXR4(gOV*:S8';)f!p"!#L;6alD(TdF1!t3Zq4mP%>Z=`uKT!Dd6_HNE[ba]6[adriToj(+PuXhieC@F`U:-Y.bCPVGNRMmZ3,%IEVh5c6pi&4h)"aA`SO@$RBL0Y`@K@'BHX[D]GfD(l%)4:pH),+5ar,cG[0`%N0b:kg::linPbmB+5)K-KYd[3TIUQ<IhQq;6`BBu!NJ"5l%<cKhhC?tUHW\ZUpV7LOS7lNq:X8g^6"_Z^1%p=_Oer)#T6;9$tn>2eZnR4,Mk*oTKFi-bDN]Q^j"ZWk2**:qqJd<p+:q>!X4p3jtm?R2jSkgX,&/b.u-,]9Kc2jMUdE0.4dn!mu[%e#$(sEMlAm.gVUQ1G4+m59nBQG5!j0b3h]Qj6ZPoMgPBTh5YCh<'$W357]EJffc$7.s1J@c!i64o/VH'g3NaH;R,Ra995?0nbXUc%4@UR+T0[T.c(0691ZIQ(>SOX7o&%-O4-./O_&PBbJSduX&*`fYkrErnLu$c0e^mI/AG<[sQY^sfq["&`rb4AhBmk7(KN[F2\+=>(%j5j%YpThL0oLJmr;YZCr=T^bB[u3thqO?;&fX[brJE1_/p%*;+hmS#m8$+"C5+;E+b135UI7hD*]f#KX;r<.FZd_ZR"q"_Sg[8Cn%cYnU1B9Dq-[]jgO0!qOMbjFr_f5@otn)CfO\F`YsU6o(1?C+-PXnQr#osg:Uq%%YCU[[k3=06?>,5o@EmdV+U,jsO'A97_3c;/]b%F>kiN4R[J>.6dahF/.k0)t'S+'k4Lo4MD!-8NUeRNb;P[:*Er!raen""49Y$hif[ABF>l]rbUP,DtC+G8L;C'01SgtAk"6Y?Gh-!%Xf"#-fR+iM1OVJE-mOI)YtL\,47TV;I*1N^5qsjIk&%0AYV2KD`HZfL]BfniNY%,)%pfPV;T7[/)B20Jq&[hGpZ-7>GGPsV]auX+%;deA_G6FXec\+*B;M6PAI.#0sme6Bu>Mj(sUaK/o!T&)c+_-'qq.#\?(QADQY^_@lg&`]rq!uB__WkTWHm"6+icd2&?2P0K5N4'*%V0[Q&.k`eu/lNScqjZAd+b*AeW-*Qq^G"hIO$>9[>ea-J5)QJ_dMj.>bmX9Vo5aBum]Fk3(?<"K5Q8uLi?Q8B"#KD/FO_:Cpl`&B%T9J&U20;_K#$WI>2[Z=ZlpL5;L9\qk_/9.;2CKdsle1+[a[Y^pGVYh,RYe@34t%Fk5Op7rC7mTMKo*iWH>NCA\bEdi,#`s9njEWS%hY5/]OH*-_S0+P5c$a0aXM/20NhDPVn26dM/jW_6HoeE2Ec8uLOdNiOE;.$cpc+,lR(_fU0"CSc7gUoU6_%JZg?$-D0Ne)_YI^QL%2-/9R'boS7J/5"_C8$;m6)f=ATkU"4_WP!7/F>?6Y&_r8GA$>rMo4DR!VT!Z'TFqI<aCmR[SI5OJ+!0?'a>&08JUjILTVB"Uo(;$%j[&_CV($Bm<tS2?-"h6q%USdNbJhCE(X?":UE72$/ne8VUKf8qUq@O-^Ej(3`ZEu+#h!2[I2L+V:Kg!Y?N521]DfD!!Y?_f'u7$f%)4Y^.mATZA]DD<VJ_+5:o4#6+7BL.*pp"lg!k!Y6C'@8>pP4V4#6ZD-f6fUU\UTYErk6qq^@$##roVj8D``/crR=JhpS*#QU1oVf%Y\;>fa37l()]3b@HPJH3ZgEfTTt6gCi(J13RUmDd;IKP!:@g<>V]a*4M=_,8[;.SEPOIJdU[\Rkm,hn(cVAg_\_?q#6%59F]k@'L%$SeUNILB2L\t*IUVf0-"oNKV5P0.1QT\q1ZC8SISDs?pNrigTc?Kb&18UZd_SigSPPJBs#5$E6oKPfi7\)W8B'R[O=5Zp7N04R6<%j:/o!Y?@3!4:-BNPS_*n>;11chiZes&5Y>#fWYeW%^+aEGEGpg.h='EPru.DLI8<D'[7bB`2derG?[M()G1VT8"]hkLkRaN5X_>u%q&1iKJWWtF/GQZA74QDkUt%Vr2ZSoGjlo&)p@73k%k?BT^rKAKcUrdQn=!@e\9Fo^!TiM)cC"aq25bF0YS]IE\n`,L#ZE[\=?'YV%@29D(=+A@@HnqpYf$f(GGp/?'QtL-;BoAH5+YBAE'Su<Y_bUsSlk^VWE"Ipt?WGu59iP_m733Qe.q[2;&l'kAd'X`A>;DJbL9AcV%"'(AL>7L&Bpf%eoC33'?S,8F)+@UMhl$\<MMq2+P?DY;%LpT3^_Fdg=KuDS>!VA]N:jpfA_<6`^HEOmlQJ^/gBelQ/]_2h8_p?1t%@S"'uDD'lbd:C09'[N%_Ud<WAg<uO)A*=`O?/M7GbLrH[2+79_SDI\MEddGBT@NN0ksN&K$cTo>1$qFkWHe=((.9doDY@u>k-NE[%IERqFh;<)7b&lT1@WGmASC**4iB&fbJ[(S^5XPf/IR\qp2"\C>$9i5hc7ms]2RBkSJQ1TDHM(B&3Vgqc)jGhfkH=[#o5*f:e:7h5%Qi1?P=MeV8O?R0#DgTn+o"b/[^(GaE60R^?e;RYQo4!B2lGeg"^@>?BLJ!>*Ck\#"nMI's7ZP?WPNTNNRm)XYTdc"=;n_b[K8+"p%!:C#8/NS][?9RJ5/r5`7>#.8`1,s8.1r2^s`PIChTnsc^W=g,gVU6Qn@I3mFeOCt/?>O^3pVDj(/&t0Sa*A<;C4+GprP(4q+9Q=h%4E^F(4NWLCJ0<Lc?Y5osq+Lb2KS77eEJ9Z/pnT!i&@'Q;-aD[Y[oCu3"sXLdSBUt;s%p;o<NgK,2^]a9TUf%A2+$X6'pP=.;%0E2%:s&IMcR0A(j!bs?r'*hfqn-%qqV.ZLQ[:]kd=cG#8S,EZ8>X28_O2!PeRjoK[mM`@-!0DD_smB_0AF-#39RS+^6C`X]ahH$=^>I]%TV$StDAKsXI;'i!m7ljDQP_P<#.gGqSq^YrEq(<O$BiD[_/$d.mJF6qWj";Dek_@CDE9\7Oi;]nYOif5Th+:sQdB?Te=V=nErOQa%P"Jbc/,kctRapHrj[Jlp$U4KYab3D2r41"Wg+A>mPm;Nj]ZfEP2C!@BN=2UEN:e[\oCg7Y=k61YmWE%5pf3G-B1J`#)^0WUG<c`+%1'bG[34^Uo+0!,>%ef]PJ!_%LH%q=6N.$FEG^@W2G#+jtK59F)f#a&Z==KCRD&aX`6c"QYk3<Gr2j%,_][Klkr"epQ@8$F_?K8Gc%]t4\kVn^*V%QM5Q2j&0PFe5#:3/eW68"k,VA$Zg..qNBg<IYInghADhk-g*O`-I_qqTEZ<Nm?@Z,6YCjL4Y&=6>,'cEE47Z"S"kD%[pXgO@[+%uHg(XYX_9B6<XL3;;C0R7I:o5M_2!q?mc8q9d;I`(3GT@65H0G_I";_DV]RV3_Vlha7aZc?';H3AFS>'=5ETiuDms:A%*F?\U^"=&-5\kc\G'Np!j4R/tV=aKHIfeUoIG*NUCI%Pp?`Mn4eJ5Rk^kpPQqOGl0,Q?=M`\>>?5EW4_m'!I^&1L1pVo+tNGLN#/%*a`ZK?I'R/&=`$\_>+A&RUP>=-Nm>6@/fSW1_u2#o:+FHK:D8fd8/pST=DRqjXrn:T=M#gE#J;e?[7e)?+)W=LFUfIm)P#S:Xp!\%)crgB=QdAd(%KE3mB'RfD0,TJp]:<8pQAaCic-(X+Mj&;q]q@"oQNSJ;B*4i>I?*lU]NO'X)TR.&jQ$V%Jso8Q@I09DG;H-jskKC%Vb`g^b:qr!-a$rV_kS4oF7`GbP<l/HQ-@UHIXca@4$/e,&CO!fjl40daJrs/HASlH^\]d2H?Q<1)j8L8]B?%@]C"3XQcu5$cTZP7%V9%SW"j<9@F1"F3V=HDKm9mVG`PThidH29nalsTNA.HQT9&ZjjHXN!GH1bY-H\/KtpBirAql>VbAPc&/fR#RLprNSn73BH55>O[e%^\iGg=6rp#=qE6/ip3JFpecA['KR1;#nUq34P.n!%BO(GqZV]AI*`k1:-[`SmQ=c9amS;HqT)m<CbLkj78m-lak<3VdQ/n-Uu(..%a7a&u`6Zs-B]g<3rp)phn9#cRNZ!O>%@>/^B8q-YlJP2\-(01D[h=d%2cmT98Z=3Q2SKnj0#un4WMtuY4kqS)E\F'H6MC$9E,2(/%b,++RS9:*%kW=-<I8hlg'dl%W^_1R'ACGbicYRV]H6`$EZWKh)0LYaEV!-g]D+eT1B8!Qll(.g,1K*<Gr6+QhmXs4j4;c5h(oQUO%5ru`hZaV%.;]Y4`GW[RtY$04hqWthp$dR_k>21P#$hD`(Wij)sXpVlB"5_A>rgdBnX8VmtYduFMfl;7#/KVWda2LTE>hTR'q/8M6%++EfGkF'8i]Nf?)qs$@SUpS;L^s378#h?*<`K0<s%/-'L+.WTWNF1Nmrj(u<45,(Q'L)esR"`>Q^h\B'EGamQ>kg;:2>**P0,P["%3"\eNXRas@GDG,ih6196j)7;@OV6muD"I@?XFf7[#EDu334O?*)f]5$n%I^W@2d]$JBB>P*sr.7M:(`36q*C0gc:ke@@2Jic0f.t%RsJ@>_BAX)MX.dnN$FBmk!gc\'%)n91_f:-(/fu#qHE$a/Uc&:\_8\o'7IY9N<Lo$[?HehVe,(ELPsq1pCXXL!h;JHg49MpoYc-S%:W#;>dd(bB.nqmW4ma%I_,i#AR0b;3F[*oc#N\SiWct>iHl+/efu)dP;E6MJJ52nl<-cRYaMOVj?%hs5+-1R"!O)*Xmn)1a16dk:%1.>GQO?umQ(K]kba50@(WI>36oJ"AIHbJCMB`P?YR*KP-8e#BN7j#Rj&4QF<f;lB#<FQUXCREo-TK4Mkc@9%jUsts8<9sJj_6R?]%DMTr"P4=OSV<$1#3S=*i]W.-Go'XQEp,3?6^I9^iZA8KU_.&a?UpC)[6VOb3<skSgKRn]X;5\`.;c(Aq/\kVO=^h%!<SVfO]j<^t%O29)VCA)t/.f<L1/#D*Z6O@DFO"&=5K!iNDm0>7r%lcm9Mg%).HZDBP<%>ZUiZd#GZ'UaD5>/OtAN[f*mq=_#*5*r.2a??YG'a#j%g3aXbA'Y#OO=1`Ynj0U![$K0GZ8):,\HHA\+"ur8&F0dmh2c8sA2_,R:bf,"6X:NU6K@To^MKnSnTM$>c@1A,f;@0%q=6&!5qh1!%NWW$BI-rtM8+o]![7D)0jYPE<@j/]lC/-_EEli!2!s:m;,[TDhqX(rBD7.=:S!Vm*FAOqJHp+kqE.kW]h7M`TM^Km!)sUn;q)*uK%b4Y."G5()&_G9>Nb]&^%-<U)a0)44_@IC.^\2+u\qL*N,]\b-/*:k<HS,&bC5ugtQ0-6tU[qXa[LRNqqib(U5fS`Fq4(@>2<.[tD%kdS3+DT^D+g*bE-.5jc+@q0d\ENpP@cUo-FZ?H9SGpu:lemK#_n_r&7<1DZ:[p%&B1fk2njEjbt\oRgqhhQZKjL*Z'>35+Y0eL/T%9YYPU`=<b)7Ji3_JTQRZZPbkONV:@^4F.5QIhTor)kUWj[M^4%E^.JIlLn<s^tqEIqDnca55;sq>u%f*<6"?Hf/M-c`k,2/qd"oA%s4eKh/<S-EGMo3MbW*Z0SIK^_U4c\FS\=>uW"X+;7354p\Rab,iGEe3/OW[jJB3cB9'=8-?3u4_Ho#tqEeqo8T+B!Jc9Th>"uqD3%dr,,%n-u/EGj3si/u8cCdd-k`%2bW!K15HWn`Kc6>IH69o!9q7EcA<G-oJtO,(CL>G,5,bAJdqsk1SrknGB-F*>%D9a&;OQq3`&e%po(@i40Odmgi[TV&q<^B#Q$25%`%";O#>oqTnN,*?Q/1sIds9+Yc/9m'b2,4K?s@u"2S=[^9XkSnYfO!1V%mf]6rHd#>Xi70>YV;%A>!_Q@3/ZQ/OKc`T8?J+\s1PmUB0s2"qHD?11@</O?BD]S-k:=H)>/CF%M_`n)'74s1ihUILj)1W!q"kA)@NdOf-!DHeghG5J.WX%pGWOp9=la1L`gH<[5_b^U%]_S$NbomrER%'hL'=N[4%/`$^XW+.F>YF"E`jR>\[j\!S#BfE%?'0HJ1u>hSC$H-p,@mq:KKNqPuVB%)ZMakmZ?H_]?tsh`9i.dDinSFPMP8^0b$rd903SY3C^DYQF#st477W"1Zp.N+kW<*31Hf]GWP-_VIYVP@,tT:otYUW,jl3Hg?I]2%`PLG[H74q:Qd0>mU@RU6TKd+=N<VUamJW5DIl7Jdpp/(bF=5:t;>j9VgLkgmX_S7#Q5aA"(XL2urA)`i)bp;QN4SgFHY)$o7,,Ap%+i4VUA4#]C5uK??]hWVt9!=NY_Leg@dBQ4-P<#,T'r#FB!"sV:$T>d\P=7d@jPo?kUHtY=Tf7>>kmj66%Xib\C-k<@IE=>NJ%7g9%jO[-BS<97.hi)]_m^^cSBKI`7Z)KOY^5MV[@F/qTjG'EFoMk"KU[.sr(LWUW*A6F1rhon7Z-atdp7,GO5>?\ZB0=(QC4k],.ApYV%md2puUb5HrCpdLfk-:;p<4*u"#@_P7;,=Q1,,4rJ,HNi\4'DAJCpd^cFNt:*l$tB:e;*[pN_\=PV*O"Wor(%oWr)*&8Zkc,aQZ!?%EeXJQORAgT6.-j^rnnDa)MB#f[m/F8B*(0\>@*s"@Tuiuk%if3/+`S;T"ctOKfA$MaU,K.jW+T/^S$(hGVR%qX6l0Ns1Dk;U*T3b%?gYRO>lP13Yho->6P:)%DgdS`=tHHhNt_*d2?X>Y7UU]M;st:9cO1*0VNO2@;fJB%:*38_cln9k!L`e!+*u'k)'F`IgY3lA7b#,b%qB%hW#=J^EJh#r.gAF;.Nqu2-H`)Fgf_Q^!;kS$tTqUq6^!hEHO#W321W0:)3U.#YL+T?\ogrB$E69UQarm/)::]+?>(E$:nTsNZ%-uiW0mb/,_L<D.tH:R,uR;,\k3TO_B5$9ol-d&XHT;S(Gj>''+MGW[Qk*-[c8"Ca?EB!'&"P(qO=$':nkEb`#mUBP(ei:!dEYf_A%6H&+6lHCt'>Vl(!0,_<DXe,CNCe[Lqba?j>6C9^on%&t_[=g3"%$8g8s5P`7W(lRU<dj$qH54h*;W$X/*V=m]9Ih&#"O^k%/t\R>%#)+ll.]?iEjk7k>;nGrDGR"5s6LP,o"':_"*^ZX9`%k=DS4U@diIflSS;E"s_r66O$'3t'@IGtrWt-i5Dre_eIrIQm(I(f_mc!<Y%IN;Lk1?qdj]RM5Vq1AP'^+UD^\aoNDiCnIA(Hd%<q''/dGkCtIo7a+,RP/]-?h?dT;iZ_'56M8gKWbs"'ZSr''Sn8_KnK!k%%g>d%8b#[UGpM-%a>A_HPW=,,(Hh]E.'qgP7>>HqfosoFP<@X4Mj4O._JO#Zr5]Qob7E4drS2jc%HXD"N.p0#$l>Y3/&54$m@$Ze']Z6n%/`>8TV<W:^g)XN&P/n4K(M^;p)J.r>H#h*A%_CCgCRZW;cS_r%(M:;bY`mOTVW->W%4D*Pm)J&FA49&gmXE("8e9d--lS43O'YSR%0<L@;Ut8$2kVZt/oQBK$lLC@jC.Q=h8]>V-FO(a?NEQ;&)X.G&/8T:iOG;9Ff?fP%,,\9WUku9?IHR;7NDt/4B?Ep3e.V"8\KuS"%>LHO@bc7d=q>.7-K2gXu?ds*V4/D==Ab5F]6V:6,<OA$)G3>e9]=2>?o64K)O^@D@R+TUN:3nLD'P+IG1A9r78Fd.4I"l<eZb79(%')#*/@6c:NAjkm+YAB+Rd6$6QBLk!PVJ,:jf5:Pi%FT8qm-fbC-.6f$KssEq#TOdG4UeFH]!i7gmmu1X/#8s)46mC]%\@".O>>os%.AJ$i/B2#PWni\YXcWr$0223'nB/&5)s-Um^Djqi=X!J5R7_"9B%'e#F/Su)4h#.)00U9b0=DF+BSO3ejj8RCopl.^C$>)VgKKm5%%l2RgBY]:#XAumA'PZgB>;ik\1!<Og8dR#D*rgKFn96F+2_RUOer95X2!W^;c$%tO3?+bi6)KrcNsS^K0b]18U<b3hG%>'=[.\[I%CQ%iOq=$@^KbQ,Rn5Ne5GOCZ\%,Rq#:2?J]<mhWFD3Z-o,/'to.m8L6j0r^f$$/2hZSk>bK"%q-ml=%:G6a+h'iM9XM"^3f2n?8'%n?]pCS6lN'Oe/+nIbtt96C(/L-F$3q'`H3k>CS9Bg\5k^bKS`&n")Dbo5&C<PT(E489"_4U+Ld`72lFY%t/Y79U-g(DbMWMV)]Ae%n"'YM)P0fpo?H+Llh'?L['I*Q5;K_@4`n(X,OM?p-;UtmS=V#4;Jmiq3&Dh=NQ.U2Rtro$+U'F&JZ-S9c^SA]OClNhVXSkmU.>dr%V20uA^0LJ]LE_/7UlPuO%Glb^&,2+c$_WL*R_g"%.TNsm!GQgo7QTfS"D+CnbF#Q2LGsMYp)ZNB+5Bhr"=[fRD;BRX-Q5bsLm4<9%n6'LQj*l#o"A$'@lTE<IqDVhI^M!L%T*1Y]E)V0K[X:9@qt?DPkO?FPktZu8O"WDnSjEsP,<gU+X,'QR/BhOt01t=X(8&p/c,S_o%:iU&I:\uC$r8fV@HE-]<iFJ*^1QR^lgIL#4m.jrOdcTe)pZ1O_F):gIKR*+_X5S#,C@b\X43M654#Tl14tb:3D:J,jo'DK=4=M)O%i)l8t;Yr41qc)@bWBZY'2Ga&K[tVN-XQc_,Z"cIE[l*I3D;II8]G8BNBBuIn\aoKDO:PMZ4hCcVr&oKZKl*F=J,f#u3+qjTkB@L)%[Zf9<+'pS<X*U#ECVd9Bd$#s8ZZ!VWhCA6GibA@_gY[fXANPp[n'B.?NUsUOgE4Y_f?X-<L?2A6h.>n1i&a$)H9)u3^Kl0`I.f<,%^uquUk?S#Mr%e;):M5X5./3Ekp:]f,/Y>eqdt*U1chC2+c>X2`mfu55]22d[4#7<5%Fl'JO;Orjl>Z'Y=>/h+rM#qpbp9?`R=8]*%$_?Xi^.@eZc54$>KlQ3Yle3/"$;U-G"cbeT^?EZX`'X3(M8#;/+*<(&>*e*q0ZQtQr>c`8hG;7$LQ%B[p/JDgn]lS.#SGo_$&1N]%UYQo,E'*q5;0fCP2:/tnbU/D5s7h?ZFrFRd?+o.IUD8C,p..-bY>JN"9K=btgE74i@?f:)GMb6a#,Dd5%S/+aKK[aUAb;W>jY=?n%ThQSGref0;"_jfGAFPKuWDM?tZhH5%V*itjhVQbD!g_[!c'a=;`*eh<Tf#a,iP?T"7er6&BVc:m)*?InL!_0)*?')llaB>=)Qti/%gU<9$`"jfA,<'f4NG(jsFCB"OdC-#Ufa,M7"?lQ-GJr1Ajf725B%s-Y2DmG=pO+[ZNM^W"^Wp"jRoO8"IXGO$?$JFD#j2HQ1Fi@m%Xaos!&RgX8=]OK4k?#IZdtmpA_!%Y6aSZU0.tu'0?CrjY_*%-J'kFoA=*YoF4ie$6X_[O0&YRIj^Y2+@IVc"i6DeHLH+!tAGq-+n%r-'#/nJ$Xgp+i&!?hXSe;2_pFM(DroMsXlJMVMHZmK,pkNY?k+q*8@B$oDM;cIE[E_jL^YW+2K\n!0@MpplBUCDnDlLq_LT2)Z%X%+pn"27`Yhr-_7Fa:c)%#atOS=jf6f*9ICo`qD#NLq[V8BW`ApYIXMUG8,^/8eUq'*nHZPTVt9a<E[o6?Ne^HNAm5PjmY77"jhCaE%[6Cs/+_E_7]<rGuO5GZ$CWp6OG(/o98sUf*.`_1E2.5`S4,42`hN%&E9p/T?Ht2NeGE3ED9W$trdPmYedW8iq8"d<IBR2f?\\7N:%@S8B7M@+sEAmj_2>7Se,[BfFP5&mBRf_,T"4R"5!B6[Lp&bLpFfs]MTTP`0QXkf3+6;97^1!8eEc2"HtVE/6X#h,rkh.Wq=bF"u'%_/7UMCGYeu)&h>LS-IYKR*p%1B!<th)B.\,Bj\feNNp(/Rkg8l?c!S$5']0.I&$k*G$b#C'q0qRP/@dF$F(rp^oThQef!UX1C\50%f":cJp"+oS3GTXtjEat2ACHm-;M9M?IDto^`M11e=EPu\9#_@[&(q;Q8SedfW,J33[^$MF)MIiZF:h)>s4U;hrGq_Se?O-@,PcjY%'P?bG_cfs8RiIm."Q$j13SIZGVPf%9fYpV=`\G_r)%En(WYhk<c7O>>$heKt3F+anZIXFH^>X-F(:Gk[Q_`,cK<NegE=pV"^9:6m%P-VC]]Bqo=OA7^>Dpo`IR,?8Co0PM4rARV['sC1!._o4Loo_+:*ktoeo>VeGF;`ZJ#r"H/?bDM)<4<'l)(k65*&Cd*KfLL+Crq:K%jmO:c`e!G!W_.!qkZFUFbk!&BPKY#iTaPP9mF^TqD0YI<cNMnOZ,32[,eek2INEM_e,7;h"(f'4455s_"2DhpGpL*`GME`+J2_Lb%3Q%E1`K/bf"Ili1`gTc/dh`hVj>=e2&OI]g92anT!B5\!A':]n1/I9P6Bj2[6rH<D(R;ab',DONdj7_2MVG@jj?63Qafk>8gO\?p%0a'Cu)Fnn'\$CP[YYbrKL2GS+jRFlke<1#$PqeiPI35T5!'pFi(EMu![dP>eH0WUoO%Z>d-X*V0C-KNHam8-d\<l_%],mXIKm_6A%2c0P64P+:+-N?8=51ki"(\6gYhh/n)>8=Ufp;j!SA6*.CAe"D[j*cDd;K0!Qm.&TEW-eO1d]lrkm:JnZjq8e3hK#L52L_9d+lToY%3)MAJ;!_X`p/m71'hM_ZRKPkYgeMd\jgTD"a"qUYM<U"lA#;EWhKf#WEtW@0F?F\#8*?9r9?1tIIKd3>Z"4<ZnhsZ^%`E8!#.S/%%?Xo=2S_Z-H1`/SogmZG(6g58*-uEM/a6t4>QMVeQ\[a!SP^&/8A%s?J0+p24DKoW4K=l1T[ZD_-?`l\%:<Yn@#rtdgqT)UH?FfE=%1k0K)k?Tpcj"0FB-E">;!>qC.(6cL;N\ShCKq;FKB+rH4GGN4UO;c<jGg,C:Jq:.Grs#jq^?2M@c<=kFA2(kNY>=*;HdpR-R8m+n%o2Q&ImRCQ^N&f4n+u!V/Rp7(Z/3@-7<_9JT\3/Rchg@E'J`Hm^BPZT1cH7%rTKJ_,lub43&NC0p4l(A?!gmt]E$6TD=<Ae0\^i\M%.C!\p.h#r/g#R+<Sp3P)m1t-:fD+]aM#1tSXOMrr*l$8#>d\5g$]B27\4*`n+T^D$K1-`'c)]C_,BsT(p5;+lYB7=,KYY+J,GbGM%&S`8clMcd.79`+QD\ffq<c]&[cKZ24Aj'q5"O<M(dTMlM:N#/[Hp"hn>N^_NgLY1kd"\AalPN'M/S.h'?iZ]'R5T2uh>#o;cdhur%m6KD(P!!iaQ'#'Zi"n2U!,N5l96B(BbWZFOhu-q`k)Z'?_;el_5f##W@<WK!/f\pT[h(FXn6?<5jXh#HMIe%m]CJ-%NkOT-L?+Z$%#mAn4Z[PZ`0I"hK(qnna.e12<8=tBg03iA4LEil\%SX9?o=Z:IF#/3NonA-_"TVbPcD:M(eD=BbMqosKV.Jo1mT,25%8^SB\<7Z?%Z\n4RTQpBUiOJH5cG!,[0_LE(DA@)'nqFS"4JMX<)9^7\Q_h,8@I*BaI%f[Qop_kdD&B^d!7:CR3ug,^P%^]`N!0\,k!YFd,$i/7%"#*d`kp"OZ:l0J($BDRGaK`J:D,4&FBfdNMGH'b#X/DTt3'T=hhUu$,q:k/X,ZuWHQ"1]rATCI!$b,b9l]uAMPAM==A*bm?Ze;m$%5MglDn"mL'V$lC:Oa-l>lT@(G]B--pTRP.g7Fs1#Xkk2)M/+9+b:tsIa`]0:`h#Ri2Jg-N"D/<V'Ol';c*nf-\3j8^M7<qfS>Lu\%PY:\jnf3`,0[NPQ(ARN7ZNRG>,[]Wu]7u_n<F7R#IC%(hoD$q$6g't*2j5u'A.G/O"s"_tY+A#DS3c>&/\"=]ST>"+0jAVm*'36k%3febR3HWOaFJ`ljV/tjj1[$t#p#OI[B@)ds*G``iF08$=T@T)kkF=i9T7pJqLX%o4:6*BWkKk)*,hlt!%BZ@Aa$&qcR6]H_Kh/M=%l+P^jc.fbAh[$a5QdS<N/+0LPfUfDoeGW&onEFDE^#\m&Hl"m<43\Q#dqk>plqXmKb@Ii]Mb+WC)P7,9aNElp&a]G>3VVp!c-mK\%9K+QcbU:Lro5W&4Qifpd.<@I1\mWsV4'V:fdAaN^DpMl!<"!LGTt50O)<A34T!^SiGLSC9BX+EpL@4?0S%6XY`gr3L9aiNNA^qZ.%-/$Ohfu?-HR[`ZPe5d-U[04K/XR#/,VK7M9#YN?RTRMAV@)ad#0P7G?N@Qnue!So7o?jDZWc-ZSDfO,5H9I!=$thW.Cn"tH:l;6B%a6,@7EW4V)CpfS2MoX%?BCdJ\_m@f;Xbp*[d;ga<h5#I.^Ju$dfrJMM#PKuo%OW%6j)[Dq_"Bn'<lK6;Z$t#a2JH`pR[0?]*8?S9%&5$0O^]RI-Hf3GWF4Gc>Xa,9O(WbY&4.eC7\Nh4ngmf4.@5-d3b.qcjogkCWnmS/YZ3W.Z=':YqcZ;Q-$ZXC>.:hC,aqehsNYs3n%V:!LVVb(K:MT;#&5^XWu9jj2ch0.Z'+^`N2/aNIN#0/XnnX?9rF0p:7YiT=*j)Hm-S!huQ)!oqG&]*QN2RZZfJSA5PUDEgl<U4?<%T'0,7QL(<uPnEmJO*uo?I,1F@%f7PAPM"VF6[,]M4E`\Q/r._BSuAQX\;MTBQZ46^N$FDGA]<)V+idh0-.Ad,aL&q1:e?M.*#%Ba%XH%]uPZ85F'orAeI^dcAC-6+OVb+\+\iQbBm<Ib)jd&^)<?.b>-lI326ss>5S1R=0Ht5o`>A-LGJL#\!0BSL-kAEb$hX5J%8T>4c%REt:\@#r@*)&[lR24QJ"F#,%^^n,AD^.[kG`Jfbe`]%P_n8l7bN/[;0!VU&:oqkm9aCr1Igo$ht4sOR"/XZB?G([$5Y@]OfQcm]Z%A4FRNSf\h+Dl::lj;d*;kXq#om?5OcB+iJ<QbN:m`n^d@_io6(,TbaFc8u6c$oI0!grXjhF\'u_G0V!hZC<\XrSZ\)j@oPaGiEK(%_VFc<e(+]7Cr(CBFc5Wu[+q@$ic`).F'bF"iuBk/kALnTa`[<4<9Y^^h,Z\S]X_P+[LQjLk8d^Td<XlGn%"I+34^2DcF!Ahq/FNI%5IPf#SFnMuFm$ZEZpWAd52;YKWb]b4,;sgY%@iaqB6b]"mJan4oARp*Tp4ZRp#a.pS3)VDesm96ifnsNjMU6Y7DG[;c1u;o@kjHa%*Lo](G(Ir'03363+P1ra9h,WHa-LW:7*b.^=AJU/<_onh,NNkmjBOZ>4+ghBn0/k$i->oLe9Hqf=Z+6k6CAiQ>OR-8Dp`GB-cF7+%SRpW$<'uS?4A91):;ek8TmHTsFf*bo18<&AT%*ph"k]rjk1J<@>;[rp5:hplC5U#^heQ'+LZ)E3""%uWeBm%8Q,$Ng%J<O_$!07T%L;L3&:U`M^bBB@4!](lP1[d.W4fFdt)R5!)di9-hbmgM?#1U5Ce@Tj6Ud"g]0d@E`XY1plq0*8cWU*)`*>tjLNRN\>'R(Fo!,!Ui%WQQ*!FfNMfC+P-9Me8cr56b:U,duR]7hio#d*tKC)<$E5ks/cK%F]kg*T:mB92:2I[:<uHKu8.OmZ&>u,F:rTZg3tNVS]GlDs9:t%DR"3CZDhf?1PjmWs%"W0jfH>Q;rR**a'=YN^jipM"fCmT*>5!')^H1\&`+Lg4fn$92,#u.VN7:o*cs,fN51AWOfo>61rdO&L)4'!%0P7'r@W>IB3"B./0["BHN_YYS7<5_k,aT.;RiSnU&+U.U-+u1];Oj$!O'IbqI6;pK`Q.Od/K:>CX/450rnIEpZ-.IkKm`gnY.3.K%Xq_Ja[Hme-HWYr>PmaP$;^gNfQWr6?Atqn,68IAtRnpc+89R'Vd-"kH_@B^?<0H&qD]^V(doV8<YY;XtoO+$PG&NjmL,\_/%N0HN%>&>4Si[/!3rF2,[2CHC[aP.rYCUJ#AihbA$G.C^@@tpO'g$L!"l&Zf^^rTO).T1>n)d\WZZcfQdJdrZA)s)Ci(+E0Gft4ISMYHZ:%KsTdN?*`4S;mP/DBTKN@\bW0IS[jg-J)32fgEF7N@.2djXY!GTA#7UJg"<?0oY:OiRs^^]1pe?K<KAdeVKu3KbVbg_:cdb@@Q6N<%PVgtuD13&?JZ(J!g9GUq"fFNXF19qn,?S>h,%t4+._=9jj=[iQhfPm<.[PTE+!j+WkK9Bp_OUS#cMK`RdHfM(P-__icLOYoQ#;ah%E#*?Rd'KRT+U9&Q1Zo`tj1[^t9B>7%lW_gaEjkAA\bFA1?JW.;c+Ro.2:GiIV)4^=[f$)Dme(-Fn%=%KmB5k0TURmh]6H6iZL]c.%A^aeA"124@F_0$)jjI;(&$nkdS^j7'KtaXU9kT_a[mK6;!mB6)47/B[VDGKrS6N\(CcX(CF&*'E31J3.;")[S09T%B[8*LgQ#"O>%Zc]+#Xc0>)S'Gc?`HX#j3jS"Ok1[5jlajCd*6u)u@lBlX/tI"NkW6$6XIM35rO$7d=cm5Yfm*1+3ii8Op_O95?"DDeoq1>`W0O[Q%AjO\T;g=.83r@QMS_8)mEGXlU\lhjSQJ/pVl'CG`@bGj(,:q0pZg"OkOPK-/B%'l`n>ndBc>'atAe4g^flU9*FQV!:lIg8[l!q_u%O`b3`=ln)"rQFKZFB6U>gm5@6CcWB#>\hEXZc]+c\;tS$!T68:3$JGie,<aJF$^;%$"?(3h_"9YE0p@\g02ke@bpe/=cqb^>qC,*%SRZd#N_a_7[P\>iasD,#plUKM_OUrH-X)+RD:Z$N;6qOY1'OguQWm"PX@T(t4-!S,e%=_*eOBln$ff%#[Ti,VA9&PX6l'Ra5K?6[%@'Ru1@:i9t`U#7h>9IS'qO0M+3EPW8o#7fCZaVX/0%Pg6??>:kalP.;cIJ?@cMNgeMsaV^d.%f0[VBi@Mehb9bU=McIbg(PN2"3Y%GA_Gd$;T4..CjATliX\e(#faA_OFSC?Kdo[iQ9gE/.U*pY**/TDc)+`V#r72ndJ<!mDT)$<;2DV-dp8MY$etkT#gg)f8rN^GOM`U%<JI4G-4[LfBuh-2/XsgVCo@9VP3h=c/Rfr;o8,)KC`T)>fhckX4d`Af>N.sQo5:M\qK>6Vf!ua"k&NE1S;kc05Ala):?H&*jeWLi%`V)91O+/lDbIKaQ.#G`B<<EOAPO5g%'V<(GMZB6==R0o.]/d,s4ec&V3N_[sB.rZO<'UReQn/s1fuO!rN,uB_>j&_8=o$k`R98_5%^/p(4!i*/rGm?3kR4i9C1D71Q6[c:;kjECghV)j$6smL5N6U+.D'HkA\j,Vo\nGc+k2U>meSq6:HV3g+X47?u@elNPpK5Z[;7p_G%bkEA8GS-!.6(AT+(0oh;fIJeBaKY7t2`&FL)Qn2"SX*VsIE1/AC,g:Ph=C;@064t$6SqR+\6DJc@kkWnS+>^?O6`;+erlA1GK8OV%Xg1(CHR:Dfbsdg(hf(O;^=UHm*7k$,mbFCKNgj#!P1V(!f<?@1\kfE0DnO?:L%VrOXK?Ct/>in]$pkDkO)%:fIK$XsDI<%+.gfq:%fds0[+oon,&o/):ZI-d>/2eT1rOHnDXYm[G+`5\qmM<r`\'X?4EE2Wo(q!2Xqj$?PFSEN&+"Un-"'d*+]o>]q/Ya,OS&R:K&a!u`%Y3QnYJc#DgS$@'=H1,L:g.`4/gW23p?[c7:M4SUKR++3OB+5Yro[_kQ0,,8ON7=6L1aZ:T@3HCD"bqi0&=_]Q>R#on[XfUTGHkhA%C]==Vp7qo91[F93mC!m@F,!,$=)9;*b]blr3J!-^/12g3M.(#iDp2KlE4fCop$3Y<A)d&aANeAKBFg+N9UW2XST7smm:G;=\#:$*%--`Ms(l]#-5>BP;5*-gJro.G`iO\ed)J*uFiq7:7+);W!q=k86j/`\)a5cV+acgA(9_YdI%!tcNq/@B>-Ds!e>]b1X^<he$+Wi>L%gH;r<_Fo91r-Q//hBj0T[d8)8`Z+#?g_M>;^<U(h+nbWp4`'sG0f.7%Veb^p.32;rQIol@%ZbaR(ZpYDK_qt<Y"e?A7_go>D)?ZR%/X,[S@t_[F]0Ekgk=fT7VVCd&/U_Z^r;5F]F0Of^^VTTN/^j$$ql=:`Zu(Lr\b@\$G'S#L@&A&><3\`X4>^;LBL[;>OQnt!-;dL*%!:iiZ_G&;J^3.+pgNrEsCBaHReJ1IqGX:Z;DR(`q"J(G0QD_Ea]:U)+M6g7>c=u$DR%>pC]#AK4i-,-fPAbn")V5]`(Gd?1.7q9l%8YR(6%R_nU'uhl2$16B6[T5O+D)YK5k?qT>,[Kc(\"L:q3ie`QSr/GCX`?r41S6e?Hret6*LcO_=BG&M0F?pJH[CX.CtY=KP#4%f%oYi]:h=&c9o>sb,JG/TQ$gNYf5-6B4B6J3pd9OWp1Q0iq&`%l'esTe2bggLNmII*k*%X*/DCqd+Q*C#7P`><=>/Mg#2!oS]q6AQ"%)U<2Q5.=_$?LV4c-"iOgHUg`p3.r&g!8ZdqboO270`,-ZDW\u5Rmn=O^mm8dhl&TFfr]sBE78rhO^1Wc]:99^g[:K)WsN[HY;7lu%eGc[&X!p-I0rJeuaN5!J%0VslV_4@s&_iFmX5`%W(J?#H:?LH%i]<4geU5Ynf"2=Q=Nq61%(!2G8[J4G48WmLEt2GCj*Hl#p*m,*%$>?g@QDpCOF0=k.!E\PN6_;9BrbZao_JgGMq>HS/`Egi%bcZ'g2YZe"76!4"INS<DjOVF-I[qGlCk9j,$dV:tR_C>:"m@iLd(H-#%M$,OL6VlfC%6G,BduI_q!+PCMT*8or5J%n#h%%s]Z2gG:3+ga\QHTCeM2L[+F*8Y,>n=&XUE8OLZ<;^4/oer5SB8%AA]H8ZlKQ=0%94S(WP@U160s+MTH=g>lMOkTtP]*67fp9@:cZi[F5BSEIeZ?Xa0BJ[Q,MP73jeH>HSb;Kop/4)[P.9-RGY;;aB/L(+r_*&,mmg^=%V0m1LY?^$a5/XH'&lf[<D2:6fEKqGYF0"1ZcA'2_rRR.R[C3E8<kHu0fJIYYdh990/ar@RSe\QPZ!-F!5Ef'8DY76-CaengIa58d%[Nk;Gn+F$O+o,/']<e1H^":Sq,d2U!TC^>>h9=DAp\MGAjBBI7IPd83DE:kl0.YoFkM3Gtq^\#Ff?a7n^SPfJZ+/E3\O"e.<#<=$%ca'%1:GlM=?9dTnB/XBg)nFuerQ$nm8/Ls$FK_=CUEcg%CUi!Bq,Y66:S>#,f?\`@CU4CpiHtO)G"l\[qQ5,eh\pOlh;@P]%#+?Q%)Xd9>?;T&:k[*L[5NfsfMi?/^me*nm:f2-'1Yp?\oY#^[gYh_5qC2<+Q;15<n+C`[Afd0)>4u8ebB4^\KV5*9eaN0PhJd>U86u4$%5=>G$bcQ=Mk?KTaYFdTQPoJCW^":S-f5=EJf5\!doBPfHp[PA)MML^c^=DfrXDdc94Ia7b?9dU!@f+uiMr!^^*6H["pXSa*F2$1C%4]uLjp1JXJlabWnH+hnDMdY4brL@g!>N%c["ZC'Sh8d"q@63\UIVZKTDsg`]`T[i<p\HI^'q`UbXELf)9X9B2<^/HOBZ5>s<:R9,%eSgkW[)Kp&>8^Z7?9b>AkP5q6qeNaoD]O,,oC)?nQhS)V]m_FFQZo2XGH]n5H`epfoijTt?G4n8E'LXW<GCE^-`:2I*)8Luk[$Im%4!o^`1L=n>Hi9Hn3mGkt/U=Ol?$`"pO(7U!T$dX`>.O4;IZ'19QbD"s@(9fdoil#%T`/7^B8Q,fSE-5bYFflDW3.DKGd!`\6EK=3%=1d)1q,T_<G\j@+rLAH^)T/Z:?9bnRb\HnK)10eZX.NmFm/m%Y3BN!V=e)Y`olG9dEhn@]Q*D5$:_as@VLDrsa+rna.=NetNDmTq%S(]0hR'u;H]^ajG[V2sV6KH;!HF%HbqnS8Ab)7*Kog04Q-D7/"-2!JXjrHjW&`sH`"fK(JI-3?+=&W<qV<W:^il3uck]:h`O8@>[%r7u'2QOq'pYG:l#>2M>V-W?^kVlduKhpE_5bE]9j)\9,]HE24u=nHq8[H^NaCDca>`EMs/:$T0eT@rZ0g"/g-Q:d]2+9(-Jf\sqB%mH_(,];`_EVmgT0@,UFS&.X.R,ehTS0#G4B_sh/Z1@j#u4/3D&jkCWZ#B;u7osG`dX>Y"7WUOUEo=OZo7G[_4MkeZcqSF%pWLWgp%r-9s.gD$qeR5r>Bjm0N6;qW.\0pV@:YL0:i&04K[1-=NeaB8TamZTFY1V]dUIe)h3]>R4fhO)`noJRV;*cIcRT!p9\P2%]9^GIa<%'HbN/C3`%QhpefZV"Y/_jF=A7RFPf$g=ORb`6"cj?Tdr9SXkG9g.GR1I?/6![f,q:>KP]-hLAD'*:LPlNqS1Vp8Jm0P=)%5SkDq[%])<(I&MB,'b"#=dW:L(RN!Z"Ui*+Dr7XZcMe`YcG1X)t13$HVWk-_(#hFGnI")5dXJhu><dTukH2B/9AMW'fHM!%Fd@2@!\O0]oe%f4VW]nbk#/9'dXa;d3>*_TVK3+_`BlIgDC>>*DsO9][mWhZDbG`'5gY%ZcY&dVF0Tj"GN>E>CX6?YXb6;b[,')s,od>7i2gs,Eb6%hngBG;1'<&k5M$s+5C\N#[#'SDsi_'&/.hF61P[KQ6!ceFI;tOV`%iZ6:$pQf`?or#l2JYmHqTRhh"WObf=Mm1V6laNI^F14eWIb%s/nNkkoUW;%J9bi*7d9a@9`#lR/XqbreL?#d63;'*IT@Ic@VjgCo+^?=3JIVZH#bA='fB2oheZnV_Uq%=;I6/6K3s?KV]da:on^4%PG>?$YC75[AXHM4$s>]hj"dY+03]PM!PBN:1.EcO`<*oeAB;%GD"I.dr05#U+.lXj9OZokj`(.)f&blTFbDm=JmqnpbB6Lp_?@?2%%+hQU99E3C27q&eDWsSf8]RVO9[i4U2!P4JE>)0pHGD9sY\\].]GJ<8*Jp1'i@H@iZiY>#QKNj\24lGA%o6HuB2BW3:@@Q,2*p8S%doKOY_HfRq3j*_;O"oT6Q#j,'Gf3J`-oTBbj;UX1Z$4+-V:2>DU@qh@=FZOLEM!O?Oe<iR*jZ.B0h/HK\@3LfilSfNdjl=0Hgk@,%]15ULA)-s!lW\c_KM/fKLY.oIg6P7BcUCX0bL52gqK3!4[0N/:;-+DFP;?]f'#G];gH3^#a28!gFc+ZE`OVh]1#:G3b<G($e%lST%Kck(`fZdo8-,N9NgKuWVOVme;!.I+mnS)6Fm^'QY3l)$A[@ZF`:A?8lW3*%;e-*AZ[Y<b@?b,pIer\s1N+!bNP.2N0[:io<Hdl/I%gn^Pn-Y'q)4j-a&IaAZK)qk%EUZDdH9hK/PF3H"?Q/i`(l3M(I'SsF1i7?1k^:2KCZ]S=gXg:50l1V@NhT`GN<ZU=Z0h,MQ8I)MA%:<@(j^mu_c(:J5s84*?*StdHca@>Gn5T)YAaaNSL,3XidRP<'mX$N4hCdbFJ%e&"A/NI(gD]6JB,"$])FOW`/F+rq7TH@6u;EPQL%;uuOW2hRJU/q+t@85<lL[Je/el^T@PoBed#=i"/QN3[=pRIqDD#nIhu&;`^+%"^]idQl<@M=4D`6,o]ab3TTSr5hUq+2PgEdJmb(%6O)Z#qJSnWlY_B\P7sr%Zj`HHFHtK'c"\Ck.!lc1PNW(#'"%QQ"*-kal.0BA.WRAHHJjD6p>j_X*.[^"cB-B^I.1N;q[[B=Epjsc%9CdoEUJ_!kk@%-_"DOO6FnH0;.oaa550,aeKO[rQ(A7KVn^FoZn<(o";k"[_LA<QmY"+nAjhlg?38PAs#][]aQ("j9\W!he33K53%GUE/cX%\mESZ>F<*T.Ma0u8_NI.f<,OBGCE3&drcV8k>)!3ImGV-RQJKUKND7/$5g'9r`V0<pN*)o;Z4?r]e&Oop"i4V_Gj]IPdh%S$I>U1s\tbjBtK<a(2clcV&%NEWi)"74/'lk-kIZY@h0m#%1IY,i=WqS4;klgE0_LJ>^c<K$]G:;U+.jpCC+qL6,o'2M5TN/4,!Z%Sp+an^5>`i8L8E$4bs)t)D&8M=grNnE^2:E$\6S(kbW;[$PUnJdKm^L7*q@&J6jjF60N#:ZVluZX6rr/rug.b.j.0-1C0OV/gK#Y%%sDBl1kF#LdZtEj(.Y:#aX)"1X>SN!Gl#F+5u%-qd7nAh(UK&(?-/I$X+IdGcR<:`+DbT4NLWob$YhH*SAkf)/Y=4sc6.3a[Z%d%%oeNsd1[JZ=fdL?*<4MG=^7F9TV$qkn^D[-+N#m6^:4tI'FJ_@saKnjug-2u&(d7FF)BWuEQ)`L]*nbA>6Ha[c1@/e+\)[%To)=97%bk0?AI@CVn&Ql!Im`KT_jgR0[,^1skQakLT(sfm*,G1SG3io1L0\q^*Go*:DB>Q?R=I]k%g\&%+4KC_b+FnYGl,48'/AWLk@9EMs%%U_tT(mTSO"W7FO@403BpP;[Z4'n;lqBRANR?<*^J]CQAVRdORp;>TGCji@gY<44$[0Kt9n`E)^E"pnFn6<Ms3T\(;X2FKXTDM^C%&#n)dop@7`M!fg(F6+g)iZ&$kn4[F)K:q>`;g<9#P+VZgNGj];I$)re^QAs>:f\plMC=JO4GfGF%Nn??o>uY;<&p#7YX\]0mhYi6%+^d[EF5e!3]K0\[]@8U*H^eQO!YE:Xd.gGf)"Xn<H&%Cr+/?f"I;_4Gg#'=hn!/QEh>.3o93:O7B/ZH&eJ("eUgI4AN\Uc*TEL=>%Q`4MlSD@md(QVbs5']jB>&_e;Z?jd[-GP/G[nUGnX=gH2XQr<SEDGXP,4b65E>+[-]Q)9%NTs@Pqk`i$b#:K`="][tJmi$!;<O3_%/V/Eph$CT373G(Al4j0/O3@!8T,?\E/#uRsi-#U1)0ONAgZ!@:?@D_jS`+o[rUlA_ONB.M(ef!Lc8/Cj29eiUcV0Ik`&5b53R:A"%QF4q23R:B]S\t']VZ&O78MYl396cX_T7DFN=4:K&F?\u;G5C'OB@dgC*O4s*^GRF#g?n5"IjW-#F8FAR:V:C[4BF$Q*@2B<G&u#F%Hc^7NM0DPAOg$Cunq<<X:"1lG[>TJq?i3Gp\qcbVqt8qRo8qAEK+TaNj:D!)I1HNo^2Ts]k6mkEVL4N0%Qo(;M#"p:FNkU^]eB5V%bUJ<R_fD$4bTH?M,bGbm`Lk2ak^.Rth=41^[-iQ!/[O?U7>>HqfosoFP<@X4Mj4O._JO#Zr5au[<lrc,dD+ABghOuTac\P1oMPnB%#qbqdpI/t,90iF2]e9r!Dd`I&nRL/ec1)UslKqY[Yg^ejUA`8J?aptHTaUO_N"OO1A<TEJ1i$u2-E1q^4B%g+fmfZ9kdV*tXE7DW%@9'@=`B7+"oIrO*S&B.h`&i]as2T$8>g?bGER,_\(lI!T9RTd9U3c(K#Q^K[C]slSjZtr'o7XV1VEDp$(7d*HqkH8'a)hhuVQX.a%5um**:!,hNQl^;p)qI)G4mkpFF#L5;^`0L7Q)\::/*@>pS?V@j.Q8>eA9rTN;$[hB-emsFUSp*857P`7E`%fnLUa[?5DGe3%%7;7%5$IaQSq7,ol-h>@$Z<q8aqE/8l,g0d[6L2%A1U.2GMB=;O2@5c50rtdRn9/AP-2b=;[Ua]ECsHpJ%1A?_=RGgLNp`#[.7fn?-(i<%n%KUPUm#6T3nM-A*]<s3H3Hm;X%(A2Nk0>PX5`fTn)$SlU2uh]@VB#cW6["X(PD?aIH-Xi;.+[/GR?S(/H<d5igfrLLsk,lq'L<&%j"iul,Rpcb2_b`+=m37=RF$inls,'idtL]U3iDS0(rU-Ko2AJ;J4F1rqOZBiD6kokrr[)!-,n*(S]qRF(c4']1BYWQJCa?0mH+T+%RR:F-G]7M.B"#oqL.XS\=6aV+\R\$M1Se]3D(&Jcs'hr)J0%\r0_%^7/]6=2BeC<j8`gfkm][[M?Yoc+"7CpF?/=XdZG%-cpX-iG%aP_Yl::tX4M:$b?SObe8<a$U_/fe0`rW<0]4&Ppfr.,ArjOaLmF1m9iFVR5aL#`p#R7;'rCs,CTo?;s9]ZMpb`X2(]5%4*ldeR74%pgrG8cU)@S0j8kJaVk0\3A%#R!J]R/ceV+p?(oec]iFc`CO9q-4*'NpRI$GDRZ0XO6X?P!2%9-(>%22B%jKFNR6ZE5>6cJ1MGt_k%^mioM2E!;q'kKOC&2L@XH2Q]^EnRXI@+lQV\-^+PrC'Hbd0]"p-kXiQ].QYSQ(E2pr:]Ol$Tp%2E!JZs^+,V:JmZ0MdF+BO)c-C+%+p)Zr"6\46dKRY#qG^\,61PYQI+%aQV_*S[_S_;V=qFiH[pBI5pt[KSA0)qCkCjK1AIpV-ZCE4`4'rTNZ/B?72\[$hjZ/_4*e1E`%fQpPb&;qHo5S!I-?4[K]ku_n$p`8SMJc`n'@0'O%RC=YZ\JDQn[(YQ&7bkt7R+%L30VIGM0&nD(MFLH`";*JADumb%Yt\nO&4QY.%.t&Q=i`7:UOX4_g%Z-D<k?4Jr0jD%4QJYCmiiCEkPE_G7Ko1!W+>8g<JVXG7BXa1C7m\9sWZY?O0Th/##e(EYTcte(bSGk_"uD(&%Ms_jKk/8Um/=Rl?Q%TJFBHdU">7Lf%JsDd:&D]9ti"Qa^VP[\[NQOi/:bNm<lJ\iV(T&]7e9YP)1?R)d\/VL/nN2>YXsiK'QqkYe%e+gFg!E!EE"pD8I1NZ[<j'Sr,gd3hG><NB;q"`We..!SCYb'2qas;36!7#D'1lq!h':att11hFu*gp54W484[7*KmdVr$@e"?0An%I5I#/0lH+$6j">#_=0ZNVXr,EQt>'39h2DLmF^a]N(pRE[puUg1U]'jBAAN\m`jCorGHd?p:<1m':V+j*IHV3Z/p7(droPOS$A6`%[+2<nj$%:ggUg`Y[+p9#nS=Vus1'`6\FEbUK`056_'ZkqW*^9\ZNZi!8hT8,[+QqT5<*#HbuTt&MgoES8t2q,roG5jY6q>:<Rd&>%S?Ek2DoT-Ln`(hA>H-N.0-GQ<IOM2'-ds5>8A+'=T:LG=rhhpMY[7/J"97>XPk)+bd`WpLn0<L\eV5G:l?_-V[gE5"[s2dI.<_/D%cCeMdrUHbikl.r8F&_e/]sR2HeD9d%J/[PZC;ZehY$/L>Kl8$PRtLb0s7T.F5K8'<@D)6IY(r-2J]E8ua"_u;L8)GrK(mdloYPiW%pu[is:\(an,:1$t,fCOcPIs,U/<rp"=rEqH@Y0t@)G<spMUP0)n=Bbi"VJm:pqgDj.,gAk<tpk'PfO6.KOn$_P__&cB1-[%]Z3Yb%e4PNOOl^keQ&'DgQ3bSL,7&m]!^6dKGa?"_a+Qh^C2m]6,lqI=ai4$c;Y#^H&E<ou+gJ9tLD2FY/<p8tnNA3G$:;V!O:jgDKXLRl%-ZGS7Oaos7J0i<>6:`E9#nHGN3!%o05oDRR8>]kCAAKe#8;t?1"d+X]S1&[e!D7koK##<&N.gBtJ=0$,Gcq+C-Wpuh+i23^#qc6)%aV^X85YsdN0(=]71^COIOAZ^CjInY5/A`*P)70mG8-0c^M^=c*<WQe>,)=gD2Nn3a6YnjmTK*%W,'kCE@mF[WC1(e>"fd,/BFp6.%1!(9>#&1t.$t*S4(sal98<eX14E*6u"'ubi8Pm8sPa>j<P7iBM3\ean(LB^2kn-fBkV=Ig,s\pFNtNuKm#i"V*f,Up!RLrS]LXgQ%*Y?5F^i<\<EBMUiK8?=RHuB(^5Y08rTM,nq&sND860(Th:68TA46UE#R`11O9M2TQP]/?K!hfYJ'VU:.TIKt9'GDm):]_gBpn4Zi%.?W,Fn0$1F#/R4%EBk8^6#/jg.UW:7$HO,d8K^)..!/p],HiD&TEu`M$l;R4=@<D2,I,<*2C9`CSV..hcG2In-;#^^(/9#_R1:K]%W%]Z\.Z>K@ZA:1Ia9+79HTfKu?=uQ?6kfs!Kj)h\!XC2#$/#9NEBFgb&/#K1",TPo8Zr4i/t'R#Nj`%$=m-$&VSE3k=TQ6-4QWF?%4XG]Aj*RGkN/.Oo=H`Gc$4/u)8a&9]5J_kf,rh\55]Zq(klFqN>6dJ%e,juIDH>h4><!cL'"5(s0G/F01^_VVJ@[!<4I#(U#JCCV%(rAuJg<5#/9`Q)t6[V]3h1D2Q4j.ie"P#u'5,\Y@$(=Wa,_5/H$$9Yi@0<-"J<\so=U$*?35kp5!?X-X.1iY4eH8(X0XPY0!Z7%o%OQJjr<!$/+EXiufA29n7kmZcB6=d&n88(B3UEiLB#m)@rFAOu`LZW"u0G=!cT0b/&e5E*hrh0orVF8BC0o1hj]Fp)KF;6O"fG<Zc%-in0s&kQbB6DE9:n"J;W`<$<Q;FK1P^mO`?ZRD:LlrRN/G4O!TQDN:=mfE%!6jhZY&hK]dj^gf2bibWVUdSauK*8F'/0RqW#,<Z@%1Z5JD@-f/CojG7+(%='mq@uC'492;]l4(-4.C;Wr1FDYe*h")UXh0B8`1*.-=2FLeTdC0Z!qR6MFSA:,KP&$#rBt?)/$B_=AX>Y_%_>L#r:&tj$8,sk;=srPAJF/(m"FLAa$4,atJQRU@Ta_=4&J@,A/7B)7HCA@G3Z[,<9P#WU@!_JlaD,Ojr]RZJ5R5`E&hpj?`ZA:i%O9nYCaa9t7W&#kfK0k8qbCc.V[?>3?:tZ^ro/Q(p<!M8!k`87aE?IQ#XcbqC$WqK:8<rq*%bqe6P?N^$%'5Jf.ku5cksl:t#*dlh%Ohb-Y.3Vu1=OGHGLZ_e3)rNuK"?K5\:'km3^ai4`#SrL-BLXa#$D\H,!&YQjd!];)#pe^M[*33';?eT`TTU`>79h970HbEC2Q8>A%@r)MNPl<hB/;\6YW7";R2ZV-VY!hU)"R%W2Z"b0H+=t[+<WX0c+m&RpPVS=(0EDJc/VnFL0V>oh%(Ls9M)%so"(>L;R"2%Or=+[Z%J:LP=W2)gEX^:Y8mB]36;usr<N>(q.Mf)6'=MoIuoJ;i,,0OFH!fG1l![W@iTe'XX8a,+fU>RGbT^X-5p5h[Y8IRP^ZVt6:.3K<o%W0?4>#m35-\dY(XEDqC$!E@<?!Ye1gA:+o6!UV9!/+?kA$UZh/p8=-C.>'Y_CQrpsPXl`M\Q0ZEQ'd7D76SeEi]mTC3`*W.(B;`J%#eI7&?lp8je>+LHi>K-?A7,IsTE,?73uVKP"_:`""1KP-I>(!A3"kE]'ERYJ<#mCH;\47B&OoAaQ<5[Eh/<s6K`FUWckql>Raats%&TS?W7"dg3Nto#2r/F*N7DG&E'BI[hL-e]>4\iQl9TfO\JKjTsI"K;o1;W`8"9>+;aE!+5d(2V*kR`;I>UUfd-58b5!=G@tk9)MM%RgBM6;;IoXN(>Xq\&4:H\e@K'a4;Wb'Q]uq<od8HL;[a3_+l.4+XE4KEY5hL'GeN`,)(mZL6'<X"W7`&*6+9N(b%^@_U3Z<LGjkq%HPj[.IPcaFP!g<adMIK3*1FqoL1*n!MBE[*nW[8e+J9tde2"BA(f''*C0>MIcqk:/6qXG6dZ:ITg.J;78k:OU1\u./>j-hd7r88p%UW?\rZBH^OO<e"UUk2+t$-FD,UE.dX^g'/`nIYJ'4dMuh%%(CH!J7d/a5CV[5qNHuKYGT:RsBl7`?h`qTSS_d]SWT\4FIt2,=f<Z%FGdd>;$WIjW!<Y<!=&6*$dgI/.p)oTQe+Q8W$X7)lN;as>qnc)8M('?&::0*K"b$"U:uH$JHJ8$)UK%6V\T>l+g-K+94%f7#@fR=%X(ifNJ5N#6*qGp<$q3E8&"sP_<=r</OE<]WL,E-H%ZD6`3:sDSKk.ia&G5X?$rQhR^'GEP!q.[uVNa^CC)N.@2ML+B=ordn@*i_7%O%4Ic*s[o3KT2."NCCConN%*0BG"$F0PURjJFli<!q=ZB+YaK]U(m5gJ.!Vs1qot*!X_sPIB"$5a@SeFeKQ$I@(W@G;-O4d16k1S%dn8!X-[EUVe6Go@(aY;JA2&g*DG$"m/4@%]-@Q,5;Sb9VA.iD^"p1=9)iDk&CD(=Mhdj/]0@8pd60<9-UF/fg^![^*e-+p]+O=er%-I97I748VKWeJBmV@<,q*$'CiM]d*E#r9T.>,]QLY"0-s_lHt7J1*g64YXTZP*$/A?l!^KU).LN:m5QuOWr5.<u%,M',sLiV3>U)%E>YO6[OO%lZ(hFclMkegD0@8jP-!FhaEu!"8UqL$hnK&5#Y?6a+WUal*G277PStgQ)c\g>mf)S9=lpbHq0o*]Z7l+bO8Wk&CtZ+T%216G$C\hJN(?WZ4DduQgp+VK`g:->A0Kib;>1ATTG-1&-WL!4tUY!*>/"DcL@2%6ga8B2of.-]#f9c$4XrjOu(GP.n$uHs,OGgmB%'+W?uYX\86%b'oo[W+aq'9:2*a*nlN_"rKS4N!Fd^U'A`pW;6GB/GW.S:L2N=7`p0$q\K&4EeP'U.8H:rr9L&\q0JB+blKdIHH.=%M4_i:C`lO`XDk7n%`6]W&^>L9BX,>2`H-SDi3)+s+($u[%6cSNgYp)C)"dbf`<il$^bE1$>`!Z+K(/;#eoTV]j6dD)1B.8:[9ZJ*%D>p,HQ4<<C&2+q,qH.Q\glThF!<9<fVW/*3egDFjcmHE2:AED[>B.n@%J0qAADF?*s6)j;!"mt2n5((1Z&Ioc6/.cXiFI=Sj(=qW%Fp(h0'+jl#Et(NHkMd?)NK:9]nT_k44rf:]kVKQj`_.u^R"`P67pIcLjS2AW<"4Lm!pnDk)38bTD="/4($IWbZ(2e(f_?]OlboaU%(uTDjAe@gTX#A`ZQN:`_peDctIg6[:IN8GOW6"I$`iq,V\J7qYg-e9JH5o.f,nOPK1H!54cSIn$L!NJ'<81^k?Z,qJj2DO+@aY-=%&!tGdA:stqfI.u[4iXDF5`Q;g'UZ:f:#-(bL)2d,h!Ag:%<hC6e(Guh->a_-6@$fL=9rb;iBa-An?>,o*]#`,^cOX7nCS7Z[51A!%fT5gl1!KUnbUGGW&&gA[BM:>aJ#p$I<b!sVB_-\M[=m2F*#S;bhugXhm(U[PW]Yas#T^r=3JXNW+rW*)nAe<Hg4SXL+U(c8^[iEA%M6B8X"_9K6bS\/N=t_"^D>#tVoRf\G%/2N<gLY32Z1c47Neo`VZ2ZOPqqf&*,J)MqZPntiZ82\pFmMfIL`a'Z*L(=N_tY^A+853`%6To[%_ttF[i>`kK%N<^KR#^!E_<c:?k?&Tl:mp:c#$#F=0<Ddj#_tc$4G(!_$2;J2N^^:a1r_!W:'<juA)!(6RcM7<ORQY)[=qPc%+$t3G53mY.\k<CJO,S53`t)aFDrV$DQ>r+L1Oe\2U9ZYgV$4a:?^tD:Hj+^U5io8UVoc6'#_*g*Is+rIe%Ljrf(8D9%bnP4RW.4f%'mlTLnE7@Uk#a]+#Kq)Q\!7$t5Sp>GR@NTf6ffHE>UH=F-ug5(`6PE>kD@YP%cFV7a4G<?M2Sf^;QW?.i1*I3E'/]N`XPI^V@hB"%U?$-DKD<S.@XPP@-uP5=2u@k>LPq"@2SP(e"p+e7T7Fl4`T2?bm5bZ,WpBR$,;=9]^Q>L(4[%!uB#^r-QLagW$`CXoXG'kmr7tp6%<3`1EiL,bY-+4hDFkZpl6-t:`/*\,_Eu_4?*#LV#Af4Eh`78++A*7i;NQZ81X9%HHa5<LL2imKiS`=X9A0Z(Q5!+L1][BoJ/":!V%qm/Pu::NsKi;n<2eR8jD&5>5f`:"MJhIe&I>93>*Wbp>aCu1DIfkNJHj-"%&NN_Ke=TZj_37<I"a6jn?s(Z4+U=J%E/-jWdYH`Do%s6_KjP7TD,Cbe`cl(U<#_1UhW1>+-!n`!WQi-&UANe;fYV/\,K_.4:A1LNm.cS7n8UMUCqpDTCY3:FZ-E=$mc@I`\ldnFDYN1C(P%HW6Min&'cc[)l('$Yau1&.meq#@a1Y[P*Yo4tcrsq$34*I<78Mk;4O_[?78QK6n\5SEgnps&f2'@hXes@HgummXsl_CF*UcL'tNN%F90'?7)mA(;)GUU?Fnk9`-A<tkA?_JbAlrRKM$KLF,gDeCsM?^>bY_kGOp4BT#AKC$9etK\=4F_OXiE^$3sYXMc5F=jgi=WnH/=_%jC=Z7;r]<7kj?SD1;EH"QiF=1i\?FcqQFlD])])97ZTk"XP\(lg6hKne]I;5EHPl@ee_'q(E.(/47eW*rJNmO/?+'VO.SDX9;]5$%j2Z<1l+SEI_lD\+-.aI=['?^CYlJao/>!N@/\^BB]h/4sW<qkZ[nP24&14*jpPnLOR;D7[A)]]I)Ip=<];mrZCQb=B\p#6!^-609%+"i1#/`UH3rCgGdgknnWZLe[UP>4/X+:*AT0YiimGF\F)E\E`2]:SY].3gBj-QF<28&"IM:;$MlnIpFu=I[7uB6).lFC4+@47N_3%#[(!TFS!K/\`hX)bbbQ.GDqU_^`n.t%V"5o,1nP1e"H08qXZsXg"8*93.:ssTTA'3ieP:g?IFNP"51_bnX;FRgkS#48]`"pCPAB9%4ALD02YFY`og8e]m=ao)ljp`9I`cf_X9B@0r<Ef@n?K]<??-J?XO#S0I6A'F)>fl0'L-ftrQLCWg^aWYkT$(p^6WnX:Fo`AW+k1g%)N5N#K.ZBpO?(\-fYL$K$aWI*QGp0]9I:V7Ht8(n@iK:g5C)?AA^Mg#e@>,'YG<\X=YKQ;oBXC:VY>a\"?iY5H>s1p-2*`i[Jr7A%3EP082hIri1k^j4,*qj",ZcgG2*5Om2rQX\;dms]Hmd@`K[.*MYJtm[.`pLL!t>rfrE(EV=4ZU]Y[g[n&"SPk%*XLCH[Bb'li_u(%<lp9=7-;";?4DBNZG_tl5!n!S^Ukda&e#d>LaU3p>0CA[5Gmr&F,&VS]nF@-:#k'LKEodJhDoW8kh>Wu4p.e=IKV#?)iC;'glM&G%M1!W(e'g=(BTBTR?SdFcj/aPLb8pPu!@'-Ce%9Ke0J>cdSHs3m$tNe*]aa[qpX4GA1%sp8[DQ--KA/)*7WC"4%1sMM\2U]G9kPi(%+4'IsVEHlEkol8*>QA7J?fP0+-h:siGs@&`_2Gdd@sb;b49_=\nDZiW/E9gl]]#.,3Gt5%7'OfE):<5cb+>+L5BuoBDfIT[AiP"E%]Fn8@L.EKG!]"'/2aY6H<Bk'Y\V/"$gUt#>Me\Z&*kC)bJg"ukS1L0T`09.Gm;>""/[.Fi3HI,;ViX)+AH6?qC1:C:S2d,;h1RPY%1e,XrBWF,"O1hr_XPn+P'a5GZmYiIAON+)X[2k1Mk90TY/$R7DIIYCI]bUo^Q8?S8n<+P=7o*`I4:734[XB(oGj2Xj:pYs`e%uUW%lh4MME'aPI]>k&pp^T4FO3+MT@71;n6B*IU/Ob(*P9@sQ9:sC[l?GWKa?i/l\F^0e(!iH4DB@o=^Hg_;\7-,IU#B'*aZRWY451fh%F'P-N<Rs,l4a57`-3gA_C_tB^0-2a+0._s>E18G`*9<\oWLeqdi8^&Ciq/pO'6,%QU[uL_(uqoil2:&\pYWpK$tR9n6#GTV1%oRa%q#B<*NL<tfD-M<1qKDCZ^b#16qOfM@Oep]Rh,PRg[8p%!#_QL&:?$@4%ep<9((L.YG_ZqfKb"4n1[P5ZCTkcPTG-P#&brYCr)>C+%^#>S$%T9%>0&HA*@/@)5[uCi1>(Rhe\A-4+>*`WOoh+!/;`>OgI+mV<E=L)&8f)RN#'%.YXZ(+"e1j(U=#h9ZNiPoW$"46mD*GVR%B&J1CF:V`*"?L#m+artad"([J!<JZ"7$.-`O5\0^rJI_tG+GNlb;ci[))-_S(R*-m?kc<par,$n+fYX:CT6NE>K7!L1n<_Ab10VN%L=%:(\^GJ97ed_>l(%BNVBE0'+MeelgV@kQ2I'.aKDHDu+H"E[\EcY@Jl<$.#s;YflttdQ$<Fl-RKBo?MiM^J\-jTkXSa>_-%rDW%S(Mo[:#d=")kJsRiRQ7@Jb(T_W?u!?8:#Y&rm@)o;%fG=n\$_\-5KD@7<nOA1,e?<>a@_9p;CUt+G_cYY$0[IR&-4o-Ef*uc5m7%%N3LYhUls<EFN,kVqqrn0.(/+3.8Vbned?m>+G"eu_Lu4MC2Dir^eeR/751tN(9u*4Q-t<.1,3,61Ytgh@id%Oe//(!"r\&5!s=^-%Kr;gRc-dX.6\&(ihm4._hUEf@_<4:4]s<%T'5"]QZtGGUPIQ$36,K,o9+f&ZgCF)>\Xc$>%?5>e_C.K%#Fn^^aIk<S^<OXR1-4Im%2I:qRHiqUNV3Za\IlP_p"$FHK_UDbJp7d=0(t&j[aZN6[X%+Rl3t<ZH/H8)s,d</E29rbX+h=_k-_Pr8@Wef[&%k@Ek.#.g9u[UF%\c])V/i%-N2j]^Og\,?\musD!r3J+"51_UT1G!.QQjX_I*,t@c;"f5'i%Q=6]8A3Ul#[,c'_Ssf0R,ptdkis;q"Sf$IE</<Ho"+0%62U''8IBG7W:cCp8$6>!9i?Ms4q#iIcA<*BRdjkgIcdG^TeRAt*+H?X?;,MYLVb;H9E$KD5l@l9VR*p7+S]H-&%nE$C$]Kj&1J8u%?8FUJ(+KH[$/#^3eh,8l]ARLg</CbgF8/rFQGs;r`0,+<*du2+!n.b`p7**lQ`E?06W\^L.@I](QuL<k?O.#=9QDY1&!fXJa"GSm%.+1<g!;hpLO0EIOTbb62$=ung`*@t\`J[`:LlQh/c\uSC.m`,@pW^]@!&D%A(UiC?Th;C0p5T,g^,QcrW80na//e]E!WtV"U%>3Z%+J[>]D7P+.W3()?fA`&hUaO<,L'AmDc=s,),-g2W6l9:jOI!-e(J`QVnn-b6bK/iPnd$Pn(AGUU,W<c\3[-VOdI2uPC\gd>:IW]@%9s7bt7#f<<@Nl[Bms-h3^0]dX0^YZ<Xu*D/mAXL\CVb:>NAK]f*d7<EZ\PBQDo9.DR8]c_@qq:J+)XuZrt.FZZ^@7V-]uH1DboDV%&qm0>^&?]\;e#Jn]#nU(3#7fbKlNtcS3^d\i`8P!#nco\Zq*3g7pp:7o#jr;@[O%gr:m8&FoC0KiQ.2sd33,Wp4]_dgbuk%6U'b"%=,O8Gs5SVmbX_#/7t0l.K&LS"+kNgd"iiXdViD3sp7#,dZHM4C0&B)2cARc0g^/MTMuUl7B+Y9!^4hrj+$43E%C)KtWJ(EM5us?c%^H=(u8EKC?%i-=(o3_I"b\WesNb83k@U4rOB\klKghUeO)":G*VtJ0l0`EE"j)fp@i<s^`XA]XlC1$N2f-UF-kM.D-9?qe+EulX@%3[\r16\a<uphL<@=&Znd/"3Os[P]^bkc_,M,k;5YZu-tdPMM9En?K3;$HCNhp`'S>rit%.8K[jC(3*\KSb3J-h#N#Vq8&EW^-3_"%5GsH*U2@#\I-q9ar%N+l0"&WjYQ3c=Q?jjk82<$f&cUW/9IeNI^Alr+hF'F>XWCRr=0,'q;`a!7H]F?/"`,.QJ+("pL^Y'jO"fua%R@'\]*h>ZK,QsQ'o-9W,fu\e6Iai_OQ>"@VKNsZm*K^GZn&sIsDZA1pC&A`2:TV!(E<#5Ch`[*]*0GXh%6,,@m1II!f3aa9RD:`D%D+uKhGah+$!,Hnb0FBp.E,Oe$OT]7Z9jEbN6_AZe7em%Ki<Jb)bS3J`:^kFYi,8-tlTSq?OeB,cKQ(bO.LBC`H<eO:b$lJgo9o^d%LPEo,9-nV:Yfk?2?[@)9I`$s'%D\=NI$CDp@7c7UG/bQ?Gq/ieMg2Vtf*KZTEsiX2h%aflX:k,<PZ<hW,]DiOc0fA^H./+N/]$,"%iQl$&IO$B:,Cf^hR[1N?*k>BH/K<JH)k./3FBb-..HOj.*7L$iCIoD,<Rn/AkT@/2*UX'",)4Cac0sW27Y[BP/GXcF@6h?tc:mbU%,]CejgPJRQ]!tGZc[3ogPiU-%STP'T?s1k)!D7QA?[ST-\t1O[MX(\XTrZKX+J@k5&sFKkO.QkEoOq-6H;\hNi>LFA@q^83(qrRV%C''b+\jDbl_W<duAgdmW&lq=L0MWQi1d9bJK+c[a@GkD#f3mi90UT#F7RdT^a0qHWk,dg;>m-3LM]D3O.bUT^$W?Bo.HWaU*tVf$%BFY9eTVu5ZClFq/?dTFtOtYRXXY,%o(g"lhSd@U\lY.SeJhI)3XJqn==I-le5K7b[;O6q:=H*hKd&ZTIRs)+^MIJhU^>fpP>D9Yd%`@UU0+a@fs'Al1\.qP2[6t"E)G,Br9PsCa:I[CuV8o2SW!U6i+XWt^2_)#5j@u[:1C^il9T4jgrH>Mc@\8q*-hHrcjDKZ3R;C3Ge%-9@;?9Sb$Vk9Qh2=j\KJ))u&X,/,B=?80KO+m*8AgD>64P(u.XMUb+Fg)<iu?WTN'P`D:7I;MLAcXfm%L=[+E`FA,%k<OE&Squ_"%S(3Z0(_D12pn;J\YlIZ?,<iYi<g)+Lk.2fuCsa-qE*LYQd]F:@NJgAqB/pi(Md<[j2(e<n8FlHqE$Via1=TI:NK(eR#EJ'&>i#=U%"b6ui[,D`Q5X?4\9\'_NlZgWiSXY`;Wu`[&#sr6Q7mq!)+?C;3XB%1[i(sk04"%![B=d7K48+PREJBmY]pYfjI8LM>B;>*Q#SoHG%1UlB+&aAX[a2VF"&#")g%ogl*3u:rXHCL!bA*O5CJ;2-kLDE9El8Z.FWM_Oj#qHa^<sY0m-r]F<*ToO9-O'QU?%s'<8W4n+$$aHp%NdKu;4NC3%]T_HWZ--7N@th(b&11Li6&Rhq;g+NTH>#n=(afEA5g^RHP:Yq6pW^gCC"T*+E*=2rn^n_"TdP>j8kE&J(IhWkTNYi:%YZj]oSsG[_8OFBR7\6'ZnQF@g2TZFeE##[)Mg&SaSTXDQXqPj@jpUb(QFfncP?<#?B1u^p[!%"AVMF>$-m8"EI$97E'k@F8GdYlu%2Im2XO1Z\GO9W/u7q*e+bcg-fJi-(im'&3e;\;m9G"iYf1e/BR-s;^E%b^1,9efG`m2Xj#3i,r$-]L:X/IS&U]/0hqS5L,l=Jeaa%+OBF2"cTZP\PkKQgC\Nt/;*C-P"joGnM[Yabi-P%%.9JdcEk,Q;AZYr0D\WNo90'&2?YA2**_n.I/C>tPfG$19I3>)]k$rLR%t7o%gZ;e$\XDE.Y(/Kj2MH'j(?K-dQkPruP/BU:&bB/7O4D41cMME\e3>MjRrFm;;;ChTiT6'(#'C<HR52c!`9TF=f!sYj;L;,<&cn5'%'RZN!B2-_CShk?kBt6QRa\l9IgWK?^(o8EoGR9;s]u+U`C!g?L2L@D5'\J<;KlRVdasdYeE7TB"@7sJS\853dqq+3ccH?`:;cR>F%ODfTb9-P[4(-]'MVhn@1AE:a&%hY=Qn73&pqqA]eGQBNjLJebeN1_VX@Y*J'$QXQB7oDac5g7Q*1)ZNZ)/0g=%RJu#WKS%)\@olk%W7M#6S/92R'?tQuM'?BU:Spm7-+1]=1fE>bEB$ba7=i,H2G9YF-;]l`NBD&"mOC'rVWqg_&dp%`g.YU>9#:!=UV05CDu5iYD@MR0%gE@BNK]/I!&c[R]`cDd&-bkdqqI9j<^j`^WNB=M`MOLMC[068R%esX?GO$]5k=_OIQ61Ak)'bB@"&*bKZS)-k%YqT=LjDun.+;q.%E9n"hHDS2ljpm`9EpoUu9]DPtZW1tOKA:+c3D]"&p:cIJI7m%iB-p`3c"DVa6;etok0(Z?fS\WZdVVeZc0p6%43mS^l$7!RkiSQT%dT;Br8^;NLRo-JaNSNL&EDps')6cb1gtd"VM0l0QflD47b#eZ7Ztr(TSFSd/::B8MT\Bh+R=P2,MtX:ue5LWfW+);<42Ta]6V9LW%rA.JB*@,9n]TQi;'YtQ99(-&,&kM.tYlW*9MN>:hfC5mNW(b'6Fi[6HmV_a,N8ke)0I\0gO==B'6`655eY8,F3%[+/GHSu=^"1/:%0J$`XECJJQob+eG4C?Bpg$]hd0rJb[R^6"KI+O_SK:lauM4P7Ko<3)MF&)[8D\_B>&M0$2cQYNu8#;G^,m(`J)'?Npn\2t2KceS.%K.B&"dVU*;)JW&AbE`24at`[Tk)mrg+q"#u5+V?IB6(q3/a8SbRocs@TB\r3>?LME4,D/t=Zr-G[:4_Pk/Q>`DXPgs"t@n6(]ST1%N,T5*pec:Z`1XD>`Bu*U2Qh[)@5-tdbbsA@*%p7cg:n^u\u3("*&f]^KISuH^)7$9j^nh_$#Xm9JdG3K0)Lo$*ReCf#UX+)E9I`$%TtI^i!+kfb+MgCS&@lPm*3_I<lT+t2os5mjo">Y4j7g3A60;Bj)\/WANtj)(aRKrd;KN0<P-ORO,_<1HEq-W@\+1*%CYc-i7%M7f%pkl;==$32FkqD6[&OYT^XK3na10HtCOV_V-ED.;ZoaHC>WW9P#DcI*SYqZ7fLR/][/t7-PBX<Im8TL.#(Do"R0o*O&/H.W-jBb7@%,TIQb.,8W1Uc4;Wr!RL#f`rKl-PTmFN)(U&IeXCdLeZ_3OR#;+Z'H!UC,,9g&EPlefo>-AKggI1RNsJg):jnD6gRk%[e#aDED3Q/%J"'?bh<!fpb[-jK:d5)2^RbV#&800(ge!Xe*fgtdH4f@\fHuI'\rboA4dWU`Uf>HgIq$NMl.e&r8US22h-^OWgltJn5>o5B<EB,J%>GSBmoB'(5b0LfAI.#r.nL=lTO@!<4G6MC*rRA=YF<&(meS?=['0>1+WRUR-9;?nTNcF\-PKGX$rkK_EV(;bj<c@TbA]"mj7I;#j%l3slo:@h[r*As]S\/F@eaX)5n@Kh:K#Gjg#QpN*%)3/$2iEC_tqZ#)J2.;f;*i\*Qi9):uf(n5CcJi/+WFCJWK\d";l03UuHf=]q%DFT:H7@JlfKf%H!F3XaX&./5O,gWi?af6p]p3cB:Qm*iE$1`H_]9QR(BtJiA%-NgXK9-/'pYRr/_:4l5Y._B-P[t?t_#5cU1)C+S%K:@Q0Q3dqpPonlT.]dj2[_X'(Vk;MY!FuuYN<%B'lQ4Fk#Dd/b1JQ.S"+P,n5FdEU?qjXJ3oaB`+](mKmObWgmU4A?%-tjE<(G7a%Q*K#?26I)#OY&D$r[9T1gs6[,M<&`2E^r`TU.Y'BGD.WmKN@9$Fd&%on>k8<=S-0+=,-HA,D',SZG.la7suedC7?Kd!ZOaG,:Eor%G.J610S22_EZE^?\McGFQ%4aVQ+sspX.VIQemg?ZJg45F*3mC\+F72V'$HN8H6r.X0upq-/o*)3T5E8Ib4hN-9$JW>cae]7bWOc!%:'klM,30H7`c`MW"!qT`]]fd9IGM[W?+g*V'+[8>)ALr^ZhZA',9QA;_,5Z#]\f>kH$dXq9NV)W1B"/N3biXCB=?6)3H?J]J<#]'%n26o:c]hDeUaH01+OT+R@GC)6_KQ$:)\WA,L[GPhTUjiue=EflY?R@DoR(b)3&jK:YSoZSeDf6,TBI.h\9:8BBf8kt'QjfmZ!?os%r4q`@&$q7.euYjaWaQelOeg_+LKG5/DEC>goXW,h=9(k2XJ%HQL53`7+>?cQ['34TAIqN",Z>q#GROsS-Okt;8FQe:.b]%:5q1Uc%QER?aJm-:kSt*Pl+Mh4t9B8>arQ(+WKrWui+L>%TF55#VKXHNL3.-?uB$X%#K@J,p3Eo@(Y2&`7_&ZuEM1eUOYWmGF6)<ZHZ:8SH%0jE4,B4U:J/)]V:<h(<rm\10F<7R[65F_N!5D:mFDBdA>r_1!dAR]8H3WSpr4JFPUP?CgN/M]L^M[73OJK)r&9SLL]p/R7k`QRVb%2=;IQ1]53t@XN)<1j?gp2=%_(Fe1t(B]^!FO]+o,-43/fMh.F/>'_0m&?eO>f7J'L-+!Ck/);>R^g;]_\a^?$0'HfCLbG`;r61"s%"aUdUXYA.caj^-hQ+J7jmng;j^Jj[4$ERK!9!#Y7Z%.5K3H32NPYh4N4(3f,6DL&?qLrR&Z\dHtA-b+Bh&'q]!2LZ]?!13;W$EB3%\Bt$uk(0VoPn;fXl2+N"j)MJWTiiA>jk<#_%j6YB@9"qO!C,P^0Eji*a7&SsL^MgpB9r??3,<Q%,"umT6dY;/TW3G'RUqOTOQGuZ%W&?U$U__o_2=hMJ3k43_6@R@X<X"'H(#X7[5T\;_$C`S'Hq"Ge,7A>#hIaHi.:8CM"BS3+&kis=VsZma@+APEN46/RO)f;PI.XH,%i!?as5"0@@\3qq^\6nhFB1DED<H/oGA\otg/^;f/CFaXrUMWFZPN[lH(S;%QPfjY7iK<I_T4"ss>>f%/MB_kI3/*^9!'[Lj`u+Uu%c<GCl3+(XM5m3TS?F*cfCt<@04F,3I9VPIiZe-t9eX'g4aWcop,?]G@5YZ36ge5>bIlA[c;h]d:$Bo\/^o(=(;.\`[d/7KlKmQA/%8bK<Re"kD(D2@q-k"*gG+9%)j^_RP3)'E'(f'_QF@Q4dX_VV.Vq_FkJ`Fra(cTD\5idQEY77+nf8em)*ZRKC&OrMG"=oWlOj52Is%]e9[HQ:._E[-2p(1Ee=!ke0Q=MqkBMQhJ8O9Vp_L0^rh>$Y%L7He!1_:#f3fTSG/!bh>o\9M$[t(s9s!?a:Hhpr1eK)>\s<"=c;>%NruiUWQG(abPQAO&>FVn"l+?"6(Y*;Pq15k9?7>n9i]G?$VRLZY<!?fZQAR+7c<UH/daZ$1l&9>.iXlPeS0r:\=]IU;2s*LMnG_3%jbtDFC^JZl--pL/a'USj&gK.,MmZtcHLK5rGbG1H0bV&:VV<\S,&Msb1kCC.(4qR'gAk_KZYSu@mL:AGXP&qL"Ii`6&[BHE3Do]G%2UEn^9?.0/nknlG@[S`deuUt'^f<8rN(1CV'*dsN$:J,d^W#s'Oq@n__nUI?ZS;r_fgMk,9XCXdajr*-`Wpk4d.-uaja%N[$:sdF%:$J=_@f2>kIZ]ULbT40mN]cV'eA^+2bcO\eGd^8kA@D8/.b@dC]PW?J!cMpU>*Tb:XVCiYD3>N.7ZBNN#t3Ip@hol"5t@eBNjouQ%D!1ah>OIe^F.1@RT2N_+l71C;r:q\.V%#EmD=0N>9gs>ReN8ulV[c)lk0.<LE1V1h00$Qs[3;X--bf<^!Q3`7mhAX?nkd_@:Jpnk%CUkD>C5nQh!2OI(WnI#P.BB)f4jm]FTUaC#i377XA<WTR"<]RICmfE(]i,?fFLYXZRk.dh*R[\91hLj_gJoihPD!`T!M!KL;0/"i%>fFAB1!/_c$HJAGMN]809Kh:P;Gub7]4s6qq(\"TjE4(L2o`u*L,Fk+_dD^k3$j"j?A.2c^G5e%m7*Hk`:/;od#)2kSJ4K[6'>S:%mmSL6(msmX,AK0@5b=I?hphcQ&W]T#$n\I8RmR<j*e>jkV+"U1[mkbE1-!d7n[:FV]gFrPWd^5jG@hJF2<ae=#FkrdGqiG`jW$t1%Gk"!lU3lfBGCiEB8,'IiT0Ki,5/f+mG.7.m[_uHijn3DNj'anZM7uVmdQat$ll23hD2T&lJa>n[OpbO;rc5I9De2R"1?Zs/9A!,t%,6<.kHk29DaN%NG'CYDVPm.+h\sBks4F&pYEoYe"o2W?I!F].U"@f"n1#hm&3pI$iaXW1ef"u+W,67E[4!dQZCdU7Wc[19>E"!kX%ls\J21o7Kipp*+:BhI%jX_Kr[+p,i)\V0pW$P9:ifMtpBOfjumF&Ae;ZBV'qq8Z-s;I[[g^837^V/UK]=aWt@M"-jmBF^=bjWbh*%2W\*F9"2I1i@cO#?Te*VS5NY$ADlOb-VmEji/#/&!s`:5\,S$TWIET.O5c!/PoDAOb.CC;Q);48Ys,QE$#&G,rd8BXB'lD*UU2I)%M62/2nkWT&!#8)+Pps4$"6]DqHu&:99G__jRgQ\\GT,Oe$?N<)YT=$=DO'c(2B9OLNm_\(A75WD3Ht!A\2/Nm=W%90=dsrb=i"R4%9?;>oL,d/:fNGht:/pL=&_GZdPX:eO8"IoD9eo60Dj"BBkIV#M?\[dhdWVO0nJl>KL0ro[G@3AH[qSH7%XAK?On>E`Xt'T#8'20Q%&[O?0okJXB/FPBH+3I'\e2J*kf-*>9c[RDDh*suhU7Vr0TXl!>o23oc1HJtp&HrNs"b:nYH[kN`J%dAg'Xg7:E:2BY^V1:<JGhRK%LH6Z&?_WDk8lU$?1B(0`bUkOU=%ubA@*4+jdPg/c\G+-R,XdrL.bdpB-7B&Fg^bF9OMkEAiZ,ht9&WoP-^0V<P-R1K"r/K#2=)-B%qKRHZ["89g&)@^PV.:O!3#ZA94]5mL<RFa=-)Uo4O:[Gh*BT946)dtTVcl!n%3:?76$^hPHa3ReUhGB:@`OWf1a[\RV)-WMbJnpn%W]*g6OFQfG4/g(=V)Z=]R4Llc+ZB4R,<(Na2u/mIF9;[3Ub$GLoRj+Eq7Ki<WM;g;d0(kkRG-@;eXtnP`#o?!":(W6G.!KEFu=c4%pGDlI\pItgi3$9g*U,VY!I?.^]cY+h<L[4[E8>Lj$bqXk]9O?Rb`pkGs7K)\cTNOX=b`T8+BO)p)gZZmlBInq'"V"N#WDd)7u6s$%fOA/fCYHL0/IU:O*r>]Wg`(5n'I10gkco)c=n],ASsS+"J9R%]9,UR27:XBkRcBt(euMFKYHQsGG\0\P7,S';"Ps-?$mSHC4!L/@%8EAr70@p^jE/7LOi)q`+D"I+&#>Q'B'oCb=["g:-b:$GX]omM-e8XmW'@EMhEP$ps*opEio#.5tngtUJHukFAOk"h2ePcXp33]02%!G?@HNHqn:+k>R!2nA#EbEmg8L#Ld3H(Bi@0WDq@C,+[?o4(JRh=-^dQ?Eq?b62\f<gX',Y.[3Xg>fm#*Cr"39n@Zq\:nZhp*n:l%D"sl+4["BA)7ss[C'lb"o'5T+lGDWFH\lPRQ2<TMBi>R=T/]t7dQ!/GLeTbgMCI^N;DQ<DW"Y!<cs4E2)R_!f:Cj`7fO6cbTf-ek%eC9a!6\I!R^B[)>H5VOJbc:[$="S1b-/3nbN;V%Lf]2J..k_?2@CgY8dEj2m1*RaH]'0(ni]^u\P=Q1%PV>kY=:Lo=P.StfHmne#%)tU-<=;l7[ld"8a5'!90_j_\H/+m0t5MjDYj$W0ZQu:7/1-J:`Qrt:N:K.:.U/\+AC*hcWLL9a5h1"&Kd4;!3=4eGVSPeE9')R.V%XUG453EU5OT?V<];3kBLb'328JLm1Zd)A2(6dd68RkpI"iF1mA_dOC/g;6EI<K$ed[\_J`1'JdpOC<t-2gA)%.sd?sZ"$(:;u.@p%@VuZkao.H`m('m\:($3;N;HIV\X+_hG\F;"Y[#-lE.XG#P5>4P^hLi17<-V?O%3?8ASi6>.K"S,Z/:>^'a:Y^,ifTXkZCXM-''YI%JdJoQ.[uqS6r3_7PQR17?j9%4!0su@MY["+hV]KHTWh(/B[G6HJb4E+"-J&_b4DN)beJ**X@VQoZj3-?^[apu2!em4`oK;rM?f<`%J"Z6Ka+ES([iCJ89IcJcWK^%`6N%XK8/DF8d1bc11aB7NPa^4r)T/Ed+<]CKD#l`2?'5-VL\%tYYC`5R04PbW0eEV!3Y%uDkDkgt%^J=neUIS\q`#6B]SHK,Q4W'%CTGadAC=V1NmZ<>P7;3[LS,+HC6-1Zkc?L`3RKE%*<dCQr&-G\&>_DdTl:jukI&qcc[cSR,Al5^i%L4ZCo8AMK`s"6FqB0Zi,,J>!BEUg@?P)PL$FS*04HM*N?E6,u`6+`1@q-5VY8[aSbK]Wn&a/=sVPZ,V1p<1gJ<]mXHNg-qaf!)#Z%'h<#DoU=WB_b2tuK)E^.DNgY_:PC'N,U"#C=Fngi`PP8`8m-\>pE#2Q.36lP59p.s_[!P6FdZ6cPBbQXD"kqUB+sW)lL04Id9H8R%phqW!)9)d]5R27lb\UE]6kc<.5R4O=/R)Yk]Q[,m#WokBI9B]uC`cb"[2U0tXm-m"osplp>_mD@iOZFrqXT4-*ORoci]7:G"L6n\%Wb(u&nD?P3/>&f_8D7Gpr!JPIOHsj[;=jm+hG7]tmTU!T#Vk**63DpIk@Y+q=lAJ\;EEpcg[)5Z0=/.L]$$\kh6nPER)b1FW<KMT%R$MD,rquIHm^_:t$(=nFc!#8c1oBU1a&/Y@KI`Y[8pNk`1#&ICbUd`7WXP>+9aR8\dHsJa)VOuOdeAP[1C8fhSh"0Fj:*kpM.P44%8VI+9]Pl[-:XCDl)@0cMY2<5FffTC/eFd;3d"??3k?$CXDCu:Bh)B\12Wsk&@mmT7HnM1mQi[3(ZFl$3pQOi*0]sBm[ZK5;Cs:[O%?[q)<?$NpHB?>lu$8N4lV*!Ka(4IO,NH4LWC=aH+hD=(Xo&Cc)1=!0J<)eL3Y^G76euTUi#"4?plLdK`TrQ#lX=[$>j;]G'aI]MH%.!V5FJl2Dolt]ck-lRE_\I/P9#U*uP`"[]3Y?]^Z_CQMdhqu/0\iHhV?55JS#rrG.kJ&K.[j5:DVIfS2Ep$BCK56@^JdPBr,H]%h%b`D_P<1qDd44Ua5M7!%f0f=#V3!^(kcFhgZ,K',4HVPI@\:&3gdc4tNn5b8/d6P,f"(/e-URB+Y:%DlDIi<TuK^!V%r;)^!&Y\NQ%U3%SVZY$;VoZEid%"6:]!D5CL0@geg>ftTRd%P,`3SY"_a++c'q=55]kiSY"_iSrn[4(@`HD][__OsP5oN<6W9[$A@6j>a!PQ6BU%#SDYWjTldcIed1+SKBOUb_*Q-gDK>^AMRK8.<905ZXWLE?VBXMK+`_kh-"_Gn"k\*#*Gbs^^u9@qN5[#8'u@lN4Ln(oL3m>'Z0a$%@7Arg=`h8GNLP/r=j$!O\4?A^33JeJ\u4cYW2RQ'mdVQ[0)1UR)L1dLd%Q7mfH!oC8'@$:-L?T,rbZWhO(qH^_9_m0@gSc+RN]g.%+41+j1H6sf(jd%6W,0%X11$JnJlMkE?^+-ai06\n''Jn0=^'*1X,G=^h"Ig$,E1LabHS!'GgA1pq$YB[*PRG#@XR1b>Egp^iPKhi%;Oqb]'^seQ>T^=F5`uN^R_:1J#R76)+`pP)P^4li?],8H2n0S9or.jXQb*(k.k&kSTcX#&Q;7s^#&5cP!d+l4G;0KDn-_Jk1^&>h%clA%M;qdkYl"Y`hVD3(=J]BJZZe[5ar\(m-_Pd9ZTE==7J("+X*A6)"+[1agkEIRJlkmt;.HH2d6p66U\'=LI?8DK[77$Na^7kN.%.Y:fD6ur\;g+nZpq%-E_bQ]lA'm4CPpZ0^X0%Mu=,OXBnqA"/m!L6&Ml_m\_$;LT'\7.ce"d.gV4^3_F!<:iS,07rIItcWn%OPo[%kG\m=R>&cpD^ig)IB7nI3U.qCm%7dPgCo51I;2\&2P)G1_N(MZD@CEVd8.aJKb5ahp22op&tVcH;1PD9&8h/6Kaa#mE._`7QX<.j%k'PLud%hrM)$upF^7)`)(cDYs,&G2PIV(eH0p0/@^aJ$XHXb-?fp7$7T!6[a3C;_NIgbE-;hFD/lK*5I+LfNOTh:-kZ`Udl&]6L3%Ns84FVJlW_X73m1aQJub1`V?aJ:8I*0BkD'RjrhCL%Y_;+^%T$fOI?g,maBK=+WoNbY]n%D(W$7gTmQk4agFY.V:;1VHMH+9BI'c%-G05aE5\A#P9R=(FSe??$-"$P/arS@/:kts\"@jk+j6j7kqUTc/7J+E#9E@*e3:Lr*JoF+QEBTBLLlLHI7Z/59Y\1tJliX?mDX9p%$Sbp+rPq91$S3eGoh/MI/t1Pd#M8<j<H$S@/A8ukcu9*)](Ou,oPRSWB&;69AEB]rGBt]"EIW.Wn,+KAH$&B)\*Y?o['&Z#nPjBm%21B8[6b#_5;rl__Hd@jl)G=#Lq]6PPM,c8b>rkML5i*EG7FJenrC<A[bkN8O</8as69Qd)YXd!%'?+\jo)\tW<teA6!n[`k6M43Y%6h'G6I:)d]6@L>gi$nNogT?P_oA3`bZB8p%%j%e*HK"NqBWQ$2hZ>7hj13cP6c8m8c/-Ha3;YC8$hWK,eXf(rS#th6!9.J9T`4(8%@=D2p]VpLIO00O"jN1%0*OK+P@S#jYpffdXr<R[Z\'1MpM6[I.iM4s]S\c:IkF!dr)0eCNZT9p<6^oab$SgMI%OBrHQhD\!<4:dj%pT$%,$2&KX@K$1JOZaoG/a]n2r`8M#hJff1/@824+\@>.;/phZ6EVAL(&CN@Dq1#nd.ca`Al?6(^)oKd+6rrI1mNsdoap>:HWX75%gHH\EeJdP^c5]G""fcqA#/:#FT-%9uqGZp=&6B>l'6-&kpFRbh+t26ImAsb6;_46/)IJ)!P`)a)6$dIPQ-eR[L&jBZ\OCdiWSELe%k5e0Zq^h5:1(B2t-rer?dZt%DG0F$C9=@tZ)GqM+GaV7k&kfN?`N*;0Q7P8lkV"aXC%Wct5sIaH,e8g?^)/HM.ET`FpS4ZqodCs/%eRSO-k+\t,+_HX1!n(b^!Ga'K5;VVfHrL"O%n,U$ad1?]&(\m5Ptf%u87naVSMfA\F_UKaB]gikqN,TE<TT\JRmIS:Wi;2=bNPoV%Td>dXZuIgS_W%W<,PksSDK]b@>F6&o]isf.(GGGi+u,.F]^&M\0Ht,^>IisPh^TSEJM<p<if*dV:MuG^:p<NjYuY>@02fo-8m9P3%`&lY<lVS\4,nZArNJn0dQ@$+ng`R6S<6?VO:bdb393\Xd249_(217/gQ"4;iIG#t!i;p3c,73;PEArme`+LKR1:$tC8AZ:>nGkOL%dX*Eq'Ii!*/agjYl<5MZh"Ai3TE8=!Am^G-7Ob8UjJZ7q9m^FZ4=`=8a`N_.f8,e2be>41DH3u:*\(Itn;""mOPdM.._".aOk>SV%/M/VJhWf7l:bJRq5HE#8#,.5mpE$b\J%='K>3)FT\"s)uN9[&,5$*#:qL4Z(>b2=0/?GTV/2J9!CCad4MSca^Z)O=Os&l^hjhDUU%A6/_(E\\f2Rb(K#3r,Ir'u=fc"2ST[ph[Rb1N)sPAb0L(5>P@ha3s:01jo)k%K8_P0bs@"NYBBMQ=@!_Z]K]ngnfE)n:F6IXK%CP%On/_!&AW@H$F5P,Uec&siS4?*mYUZ>Ht&Q*k!1M3p7d4>f2SLf'h;.T>12WQm7W<qkO`d>5W[6N);;&g?HCdp=2X>]Ll-JPQYck+%&XG&o*n2uK(LfCFQS4/;p2No?80IH0[(+rVV&*-_V*k>7]-hB&7/?fj)CcHE^FdSKM>"Z#jB&7TV91!P]:X!LWN^R>k@989MZXj]%B>W3pOTFLpC["H9>^Tb=NX1Z]P6'MqS[f>g=q)bWH.=K1g/T)tV:_AZjr0"W:JDJt48A(2=luL\=aO@,39qh($JPV=L5*[]d.aaZ%T21R_Y[=5f8M'uWQVb"&Sbm;6pppUFdkakp9Sr#$rjGbQ>&A$!mIpI45jW4EaK<.Xk(]@b"ta5E#+'?;0\*LI&,JdK,pCGAk,>'a%,C*QIOsLW>)pa&[.;@CY8pG8EFi/kjeKqMb#ZO<Snf%bM>?[_)AEZgUhG$+rPiePmY*Yud.(>QN:o:nY->uLXaF7-bSECVHm)eC9%jHc0i4e#&4fTT-Z8AXlD64(f\jmmPTo\VYpOnF&L+AYos\qq2:ZDFVuqnQoMZG^YheK;CuceE'6kr(ai[?M`mf;%ZCnGj@-Kd^D$%Pm42>&o*NR<Eb8XVOR-'S&ESQqUH@._1Z*g(Md)@d9dV*ANCa/jX[3Chg+nR[#V%@-Cfk/SE.EGCc64?jXps?NjRKuN<99iA/VJh%fM"<lF7C,V*;R0NU1?Or:\GKDiltcJG3Yr,';Rr#\S9fj]M)j/pOiTVMuXGTL+>o4Mnk"tRcENJ,SQIIm8_nW;oYAOMo@Q)IeFcN%o.2a$Ui"3XZ2p;TMagiN/'o"*V(;V69K"-K^SOpjfX/@#[lKS:kcB+>f^`r2'lqUb@nnOFJJqM0br*U)O]MPU5h>m?@A5e[j-?[_%",OZBpS1d!bHS#m^bdNmF3[jpM4OY.q7Z,t0Y8C\H/8<L5H[noOb\"7O3PBald&%K6.ZeSpgFt=3SMnn:SH`D:fOj<[JGNPrQ#Li%pZ0WSk=DS2F\bmEeD<M4ZPn;:VJ'4A4s4RhArehoR$;>eL/k]BRW-VtN]i7nm^aV@QKkWhR"ooImSli0(?mQ_:0?7`Z:*Q$]/:Ph%ZLSu\l`3O-3I<qJV_e4U6r+Xu"`Z4RQC^"RF2UMB(pU,M)M4HF]7A+B@G=frMmmPq""\0V:Vk\Bp'CJmF1mUigq!-J-:Md2VMVbA%6@MfK5)899U"S2\dpt-TrNuD5"e4N'RQA0/=hj;\\F9*\a,e%*]S3>f,V1`h1.f'kS+sSWa$]tI+("8G2?2b@=f^=uU#e"f>;*)0%79TM%K:jMb_g7<$ji-]r&<jE$CgG3,^7'jt*aB##etME\HIEq]1dVj6LPk[aQQh'q/bTm>me[](gb^CsgG"&%[7tu&h8I8\J%Vqb%QDIu3p0*FthogA;0A.!'`t&suDLpMA\G8YV5?%>P`O1p(m]JjODjMDQ>0peWU>F?k0#]-$)F;Mq\D=,a+`n@1VGILQT,ar7I&TYT%Z^8,;VKgE=.LR56nO:Of)V!IaO-K=(N@t<u:g(@?\PG-@05\78YaP5i=tRbUXQE;\A5_X7.s0K45ttr.cKMR0Z*XA`FDeREmsBR^%9[2rm&LLXHe59ei9Ar%^@O7kGpM?k&)X"1?+_,6.CeXXfr8eC]o:u'j'j[#6+rePk#kFip:JV=@*aMm3e_s&<B1MGm.EL#^YQE5`%.]i^%picAq?Ae3VPZ4m]_H!A[8LlI]\:W2+O?&P?>JX<>LrZ:@eNH4JdF74P%"UeJ0bTl=2u+NnmK^;$X.FpE3S+Qas$dQ=Jou`i%P?+.89=:=V;TjMLC&6$'25NFSW/dEMbqi3sW;ADG8ZfJ7HdoaSC3FO#oY-p]/"F0t>R>I0j%42%^rI7oM'uK["fD-D$ID96'%;GQ%-^;(:nVtglU./1gVBNj+5MD#4g?m"JK$q+\![h8<$T>?*'<1ZbJn<C,M@<f<jpgoj9\EEAAsT#4a)TYqV17Wn6KQmL(m34?DPXQt%B>P(gh3ktf!/]T@F3J`s\F*LGEZJ:l)QNo;Sr!oHR@\bl/#N/XdX`gt>D6kgibY6HWMh't[HrfGa:P57c(mZ-^C/2dYs_r8WH<+M%6F,+-b.+@\Y#$hD0`&.E^Yi*t#ZjfUH7I]YRupOY@_qm^LW]V]X+dKq_X13&X4gp(g0/>#K0[LO>,kG'OaUXGSSPg9g%:1bC3A#g%"5CRR9Qe1?2<K7F:YY._gN#k6'6Y'ok"M79rcZoRVj9]`X1>$UYp^.!Me?<oI?;<cgT=H<?tHORn]MVmY%:%-FWM$(!qlN%+-XVN%:]OIGb[2TW9"jd&Ab\!O;[%H7$J'qX_(l[l`1V*X2>2>uWaXXTk9O?4=:uo-JD(iB,+T3Ig'?Rgft*]#d+-\+,,KdZU*QU/:OI:Y%ec"V9;3fE6"eX,kjm7c']Ph[dFTTq/fWK!Y.=G2&\+>3`$13rQU-ZCKDRCUKl9co8]=J<D19qln?ni@">IVe>F$sI[T@lPsf$fi@%Dt+5s/>?uUinX2chXr:'U3F#)I>J:J6rWYiK,mB!IKcBb<#)WKdTWc8F/l+pk?\UL)/^=_%oeh32/@e_a"taOnXb-,?10?cYDQTi%'0[C"]Dq!F,YsK9ba#HCR+S!&jXdD;*#3T<$DH/+r!Yp=;U%efA_@([I<ZYg9([S=A0?m@!pW9!)EfB,[Z%Y\igeQ'ZQ5RGhA^:J%B!taI#qo7dIh<b"4LXLVO0>1sl]j[5<&,\](t0bG/NY8Ln^Z.rmCH8CcqT6=K$oPHIDT(Yia-qsF0;EG6*"X:"km`!$ksVe/Zg5T%B;DX:Kno3"_X(IHRn8m?>/u<X&Z.$-:&WN(nCCH;[,`?Xc@!*KXV!Kl7D#4CX[oVkB.J34Xu<Ia&N-3PWp+T?$M=eYP2CQD4I^tN%>MS1LMr$@2(pe^5`&h)H6;ocqgd;6J09pRPd+q&cVhg>FkgAdC>:7?dh86_H6dbC*P64bhhhR)Z(7(?Ek%"R+F^iX,Q3=lTQo3\l%VsH>.V7N%L1b%WOk)nr<jZ5l`ZN`BL5k"::XbT?5KEaH0I#9)DpCiNJhp8FTY/TSH[[/6Vft#RqpFP>!ern_2'Wu`llZq$9cbd<O%NMs"m\UWC>ft'9jAboXW-n]';R?U@PLLed^8$nN5T]5.#Ia,>lZDP7\eYnGGA6%HnL6lALrVSRQB7(\[=/*>%*/=8_WULnXZ*8g)%>EXt5Rn%6*#u]9'6.TgMh1g$qSs>`C]&G2dDT.seHHj%F-%E!=a-jBaXU^QLFE.4XdO?..4hC.`=pB<VA=LOAV(K\Y;n\9!G/Dn7%8CGk]F:n>uk3;d?RI[1/h$n`r3?jQ$YF.&,#[_%5o"h)G]-)$\8AKGk%i8#0rusk.M^W%+;Oph-/9\kiqD.2t.aed#p5AT`O[\[Y%o43b]/Yuq!9c*>@@E[O]r/N_.`[(ZYe$N,$nR4IfqV[<;`Wp/;D7V_PcUS`/4i5Yuq@ub0dMBO!nV];G%rh&.']dGj\TPjD>NSa]%nBDr8mM68^2g#8`PS01<46"L"G#aYpF;]F]Jk9E+l0H%/g?!P=Z?`e3";9UES+t)J1$"oY70Y1dI]h4!qHS_]8L1r*0hAQ?p4YkL%4YH$IZ5$Ie<3nfc732]K`o6N58%GX/5Y4:7>`1gc;b:)8j)U]o7qqFfa0i>RHBNVcY8Yp2PKu+0Yu#>uRtgJf'bBEd8[HlX6BR9i%/*/0NbdtHobl)sK*p>'oUu!(,M^3e#ZU<7\;TKHXbqu%Rb54&r]_bPh8KfhR7rahK2OKrC2)gcV+f6f?Q>i0a[+ar6+/kCLKg'F/%bLn_D*aEdN[XUD`(>fR)3(+dW95Ce(2q6S(=7q3GDGlZQ/jZ5B6:'m<KqKWQ<)'sT3Bd*jSQ?J/3g<2B:\L"QK?qNa;C%@NrV^Da%nc%+TX3q5\(&Pl<A8Pl^M,!N=CW0EDnC)(Xhc-RE>Z9@)D2E1sC3Fjrq[2pB+bOW-;Mq8&kP-9DE2`HGk\t.dk$\^eE4RkY((47<%aoZq8fMk748#6OO'UmhpML)I+AIZmCJcStA-)H*p[XkWoaHQ<YP$m!C$3&o)?b$g^OgL[G0l,>EYs.]h[g@)'Gejocog,JtHcqpM%2SkVf'""Vn,E(q8VV4G0^HT57"]:@,*`(dR</ZqZfDnhahh*aH,rJM5kf"&'mSW1_8W;godsQ7p^M)[(?ohNpp^QjVaZ8^U5G`.S%dDR;*ZDJkLVOh^3P+oa&>B\=,*RjXAe,/iZYiZ"N0U!)e_p*[uhMtm#>NPNW-MCZgr=Qrpq+657[67Ae]e)-u@GRO"eNcX\6t1Em%M[],)[rf?$^;?qi<qL1;pG`_9BCE</\0MXJ>1m(3,l^0^R9YO&1Yq`2f"/Su,A,uG8r?g3?^f(c0Seu?AP:LA/a)GZOKd"4%H+Fo%Cp?A8nq\2;rLkF)H6(m*Fp?DAOS2eOlV,gj/hM#\#R)Tq9g=g6UX,#24Zp8E7(oMqP*\+3_01CYHt@0?Ic:3=cDS]Qr<79R48;6%%*;5nR$6+!PQZRMMJe!?IQY41YJ]k3rb(nViL=l&%pW6KDnuSR<B9Qg;+OQ-,'0G;qiD\SSQ6_-Y=PW.^m+JWYHUU-3kSUAHL&>Q&%#=ksM^2G5RDY*&SJ@F_?r34FEH3Y.fhLmU2gR9h*#uYZGV=sEKg2h!"I5mK`G#.;a-gr;=@69Zt]D]m[8/4&6.?_A('UbI&3cE@8%-?MD-p(D9nSbY0D-]/Gh'MZ`>D82A:C9cJ=#YW7/qGdk#AZEM.kP`:2R4nELgCmo1[=BCm\hkgYN-a;KU%eDfq8Jgkht*=(HFt1>%qs+>GhF.5$^<)p.WUpd'$k>8SopCik\)U&XJ%te$&F+&F+S/Xqoc46A`^^m82SI/C9UFPgVI8EWY(f.>*%b,N@T@)<EI^Y9rCgYj%>/Dj\T1\n@Fun3;9ssrf>BNYE.<F_8,;&Rd/L=X?6FTZOO&g`G-:"pEQ\SJ+,?:nPJ^8#O<\lj&\[5]&Y;UIuK@0Oq]I(q<?FjqD%mK$tZ?sM)83q5Ke;Oq.:COStEVFu6;,ns^iL'UGKY"eR/iO7V2q8GLBMQbjU\+n[pFG[2L4=]bAfj\1SaE&dg5dRRh`qK#u50K]C%_fV28dBBIuiGP9#Ua\NHK88i',(5-A\+R!S+1?MrIQ[S;[RpigD:<fDH1!O!;VYGUqCJV+I9VD>ipo3Jn%![,I9YZR>u'#+<dr3?%#$+)DYTg4JF?s6a\8g\\I+T!K9E=^4)E#UM<MD3q"@(QlHEV&;kCU8>QL@`IrF$-[3dTFs)_oG!<d?lW>NnHe3oe\4L.2$I4l;cK%6B9%F2^W415Ab)#*W<IF,B$cCe(;hAC9tBXRd3Y<YC_`-6M9:t?-V5,s3*6:rR:IOR0W++#JFGt%&2Ol^6Qe'>`PtpR80Oq?D=C!%p7]?jjK4d1+[,,H:1!J'A/EGN=kd5/!`^WYp79eD&p[HacZ)?:F0F-q2QOt\FPg'kostN2:l#hX,Ycdl]4P-?RL0(R_O[4$o:S<T%,3@5\`EDu-g3>PjO./EqZZiU>B3$lg3_,F2h9qQiOVQ860<'h8^S%<c>!P7#8DD%"eVRlt7m4VpB+CrFc$Qa2rLA42ga*\ui@hCn%9lH<HI[jD[\3;MK'u^gNN][Z#.oeuma7@Z3h2AuT_G\FBf`M#6FZq<XIb&Up>=3<jCM4-M8tVtq;8#>XBI!e1CR>%O\2KYcA995Y%^S_!4AVJ'n"o=HiF+X3>2pDt<Ld,)$/prm&!rOG\h`:D@4K[gr)pN?%Z[A7X'<4Oo1=:=E2NgBM-29;3DYGt..AHV-X]o)m0=d$6%:7A]+9t[]uT]`'e,K5X>E]PPD#6!+tM%A'U.o<lqF8C>K9aSKT(<VRBD"=-3k@b8))H1"HEDnI^lhE7%UbW$8PB[lrs7MAYBM)eh%l=Y4.NflT"%@R`/]3Iq!PY@pdg9;C_7#KhA%4O]VlDo7gb5\uW[<*&ijgA%D%)V\C(D_9'9MK8%kJ.tU&R:K\T<XX).UNa@3YLGH%1]=8l+>4QEnu]LR=J2aDW?.<r&RWNnOj8^gGs@++:K-rBj3_<R]o?;YU;M/Dcnllep[RIb=T'Y?VH3@>Dpqqr?,"ied^Lqe_esgj%TVK(gSr^UF]kHdD'DDn7HCBjB9(K*2`<;>*5g5UC60)J.P/c__,t!?"/[?!+LSY2\d"X/TlWK(;DZ:s8EU=Rj7u>b/7<M^!.U]tA%_#`20cmMgGVmQ*Tf-_iQSQdqe=MKWH9lK8J9iBl_.=S0$h`k6=l@@[:Bc"gTIg\#I6[Ods8g'GAQ?W4k>B2o7.t+j9UM0%b,/>!/%'gl>%oj_.h5u'(Hfi#2R#CtI$eb>d_QjcYlcDpf1T)jFP<NjE=%MW>]&/rs9U$]/16$4i;0\cUJ]C0[9],*%Sm0,iQ\4*OZ"a<DL%3[^_*G8:<+[h?W3m^aC@"=Ud1$l(`srWHQfL_)c/&lh<sJCID=gu?d^(PkaahIWBG#@")VY(cZqjVoU<U+uPnFP[P#P[g^j[t1^7%+Z@0;fiZBTlIC7#A@L&1,/ft=<S"l5dT*-:I&.AZG`TdaNuRs.kD)g,gtd\t]Ia3/HTp$h(U=^lo.0F.&XrT'QKEL9U<tePIF#B>%Tme[`F(O*o5^*Cl;%kaf6!S\B);]7l4l+0"1K](i2Ni7,)F"YnfH7Pjr.AR!FLjkDeaHTu7IM;+MpQoW:jqAWIor#D?i!&IY,P^]%?5qgEcB-4i\,L\;pbZ%+M2-qV?+dVDBpA`U%PB]%kMR,Ko)@TY<u&t"n)/L;D]aAg@B7lKD=M`)c_mV"n/pQU^O;N7*M:Z5"hJ@o%kl'.l'."C]gd3Ill_U&fAChtioD!TeRNsY*`ejY2HZ_+[m9q/r7b%3XCpgUtP$QO;'73?Z[qe)0JB>1jm4n?FBWaff[uL7Cg#%$W%^93kj6qLlj(<GIoWrIcI6#m4K7`VPREbDO(Bgbup:@mKUrV:<"JnhoE60lmkOFbKUFQhomC9#@EVgH,[d%$\[CQ\>$N220s.?c\g%>c.<W@PFA;`&gZ[3pWh3XtN69=OR`71#4&s*6HPD`(F8,&9Al"As<S3`0^&\NRefNFnCuoRAa=-9ARZ[B3@:eIRBANQ\VQ4.:dlH%p/7BmT=K'7hoc#)8AgjB(%<+4aH+H=G"AbDQaKDh[7[&uG<,:A9'`m$_28<#,8_h!E2DJqF]Eo0^]:;+f/7T"AD@uE1qe+5)I5oq%8M#Q/^"VN%$aPX^iG=mGmO_%sS>P?%g-(:=c7=p!E="j_^\f/5pHeGUPrROQ6=Bl9dYF[i$pPqFm12]GJm*3S4lL0/?W/+TJ)18A%]5)O2a7*B/q;.!A`TO_l;J(@&hV1NdMDP4>oI?Yc>OKIN>h's`M,"?*oB[X3RAT$)U"a\Ffl%8D&omU!6E01BGV'*<qfuFJgSA(j%>u-^F:[S&2+fSE&DL2%sBAI"$J'n**7XigER7_MB,1A??]%p2:A_$Y@U/"[pOBIecTqc8$j#!'KdBqY1+g'kkY[K=S-K&g=$VQi>%60ZYEX&Y3OeRIeJpBZlF3@V#%qQD_AL0+?j^Jkr.a+urrf8r3jf9ecrmm5R8:X;ni[,uEIp-0DM]4+\SL!&qfWg/&sNHHa9/G9lC%5>7_%?"i"[8^jFO/Q/h=<;]oXXH#cbA1.$'6>L9nnD.;DB/sn4Q_&'.PmhX.n*P#'1Yj$qoFh2`84eSU"?r0B-m`#DQGgW:83t6T%,u'mYb;i!O2f'J)F[]5cP^EFPDuB8pE>ig)2=5_.4F6Y]q]CdbB/YK,BX$FX\gLmCK7%gtZf\LJ4u;jPG31XIr)cKdUSXqq2LDm"%$%H0F@f/B]""!O_>RPb\fttIg1NQRKKf.=Ja:-(j\.u$RNMP@YT''sB%@CGoG]^"=b(X9ST6V7%h-F_<l3:s"f03MaX1#+uT7jRS%Y)D$i'qkI"S@)q=3Ya:0($=9Sl.%!Wr:HQ$qPZ"9G*Pl43;\Kmb:MNICTh1p4X2JNIXMV$dMV:*njfO:5:gGBQFH+6lXd4!p+-ZL%r=WgSn_7d#/i2fu^:/uJq'Au%@'7Z*[T?I'rn:5_4aqb8+7C]h5W%lPpn:/6^V585VW446*&\%?V,=0_-A&4pl#UfVHV-C!,6eaP%&lXhb:\GHj/=1I"PHm-lnOCkb@7c`@W5E*LgqVCBc<FbMcgN+rOB$NE8U@<Os"p^"ptM"B8T#MQ+^VTYhtKBRZ[LO#/,gn`T!#76%Vef!S#keYg?r`5__sKJ5@k5k&'kR=8G?U`?A!nCG.U0H,Q6VgspQP>T(\W=QOW_m>nb`dtrFo\(N_7@g\(d=jO;C[Dm!SYSnF<5P%gLnC6)XR\7AQEM,(DlD^#&h'!++jZe,VQ[^L;?BXC=Xp3a9q`qQ,gJ3=oCFRY4H_3:-d5EVn_CiVrUf0T>8QbMtn[,F%6&$Sj+Db%A(;-!U_jZ8$hWmpS(&>P>T#GsT;Q<aeLd,UT'&S0U[[%6nh=CAh8=?FFq<%`&:b$2(%DbL857a]j_ZFol/T=R8B(P-l=Rgu7;#4e%c9DNa:+@UD`ZhI:::DGMCCb0*,$].[/5/b/rYatEkB*9.fD7R$+SK6s.Xgi3mb"[en-XC%X)e(XmpHKpqRKnJ_kgGJG;Zt5.XsTT%?P\_/4'H@cj1+sYXnNdh]B@[mZ1E#sF?:Pi^TEU,nXemPl(7%Hkri>#7\2L_di?cEA[re8a)fE+A^dQ)QnG$%@=%g8)DA:`26>bC%oQZUM0L"&NPCPk]igX:N,?UMJRh&Hf>9>1%pW:Y'+qiT[^bQq=bZC(5T9Ga9/T-.-,pGh2G;VGDCfZ4AcUlro(E%"%Oj^Ra:B/b/%hi1Z5c27?G3\G[Qq<2\.k4rGsk4rG3@fc%:.,3c>DThsIL$*=m8-O"udr`J>\#C1orJ0KFnUC=?F]OO'-GA`c]Q!mjnGd`.kllN!%9h0U-LZnhb*0IXUs/<ASYq3j^Im1?;Eq+Ph?n+SA3X@E.2>oN_hE'-+FBU0nEJje4dWJ!BlW]\$KA^Gp2"b:gi7+[hNCM8oBC"`u%\0*SIoFK-97!Uo*ZaMO5639'B/\p=C\lOa;ea<8O4*[@OoWZ.B?(MGi@Q-Lm\kVfc%9rV5TPc_R8^Yl9KEHQBcX2=1X$k<iBtAnS%kEFsTf@lf'4^b:5BI8U_f2N7>@u=\NALZF+\_F.MC&'fTbj^,YG(0H-s76&:rr4&>q@EVggRnK<^L.#ahu1HBr==DR^OQ4:lh0X@%J,54Uq>7r+^OQ.(J,^U?rS+frs/3X0n%X>Ob<PpB5Q:7]rqWbtF8VBnJ,d!mrmO+3j59k4rLa)D5Q2`Uj,rZfJ,7XOrBL>Mg]%f>FW(b~>%AI9_PrivateDataEnd